% \iffalse meta-comment
%
% Copyright (C) 2014 by Diego Sejas <diego.mathematician@gmail.com>
% 
% This program is free software: you can redistribute it and/or modify it
% under the terms of the GNU General Public License as published by the
% Free Software Foundation, either version 3 of the License, or (at your
% option) any later version.
% 
% This program is distributed in the hope that it will be useful, but
% WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
% Public License for more details.
% 
% You should have received a copy of the GNU General Public License along
% with this program.  If not, see <http://www.gnu.org/licenses/>.
% 
% \fi
% 
% \iffalse
%<package>\def\mgl@name{mgltex}
%<package>\def\mgl@date{2014/09/16}
%<package>\def\mgl@version{1.0}
%<package>\def\mgl@description{Embed MGL code into LaTeX documents}
%<package>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{\mgl@name}[\mgl@date\space v.\mgl@version\space\mgl@description]
% 
%<*driver>
\documentclass{ltxdoc}
\usepackage{mgltex}
\def\linefill#1{%
  \leavevmode\leaders\hrule height #1\hfill\kern0em%
}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{mgltex.dtx}
\end{document}
%</driver>
% \fi
% 
% \CheckSum{0}
% 
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
% 
% \changes{v1.0}{2014/09/27}{Initial version}
% 
% \GetFileInfo{mgltex.sty}
% 
% \DoNotIndex{}
% 
% \title{The \textsf{\mglTeX} package\thanks{This document corresponds to \textsf{\mglTeX}~\fileversion, dated \filedate.}}
% \author{Diego Sejas Viscarra\\\texttt{diego.mathematician@gmail.com}}
% 
% \maketitle
% 
% \begin{abstract}
%   \noindent 
% \end{abstract}
% 
% \section{Introduction}
% MathGL is a fast and efficient library by Alexey Balakin for the creation of high-quality publication-ready scientific graphics. It implements more than $50$ different types of graphics for 1d, 2d and 3d large sets of data. It supports exporting images to bitmap formats (PNG, JPEG, BMP, etc.), or vector formats (EPS, \TeX, SVG, etc.), or 3d image formats (STL, OBJ, XYZ, etc.), and even its own 3d format, MGLD. MathGL also defines its own vector font specification format, and supports UTF-16 encoding with \TeX-like symbol parsing. It supports various kinds of transparency and lighting, textual formula evaluation, arbitrary curvilinear coordinate systems, loading of subroutines from .dll or .so libraries, and many other useful features.
% 
% MathGL has interfaces for a wide variety of programming languages, such as C/C++, Fortran, Python, Octave, Pascal, Forth, and many others, but it also defines its own scripting language, called \emph{MGL}, which can be used to generate graphics independently of any programming language. The \textsf{\mglTeX} package adds support to embed MGL code inside \LaTeX{} documents, which is automatically extracted and executed, and the resulting images are included in the document.
% 
% Besides the obvious advantage of having available all the useful features of MathGL, \textsf{\mglTeX} facilitates the maintenance of your document, since both code for text and code for graphics are contained in a single file.
% 
% \section{Usage}
% \noindent The simplest way to load \textsf{\mglTeX} to a \LaTeX{} document is to write the command
% \begin{center}
%   |\usepackage{mgltex}|
% \end{center}
% in the preamble. Alternatively, one can pass a number of options to the package by means of the syntax
% \begin{center}
% |\usepackage|\oarg{options list}|{mgltex}|,  
% \end{center}
% where \meta{options list} is a comma-separated list that can contains one or more of the following options:
% \begin{itemize}
%   \item |draft|: The generated images won't be included in the document. This option is useful when fast compilation of the document is needed.
%   \item |final|: This overrides the |draft| option.
%   \item |png|, |jpg|, |jpeg|: To export images to the corresponding bitmap format.
%   \item |eps|, |epsz|: To export to uncompressed/compressed EPS format as primitives.
%   \item |bps|, |bpsz|: To export to uncompressed/compressed EPS format as bitmap.
%   \item |pdf|: To export to 3D PDF format.
% \end{itemize}
% It must be noted that the options that specify the format to save the images are exclusive, in the sense that if one specifies more than one format, only the last one will be used.
% 
% The are two ways to compile a document with \textsf{\mglTeX}: The first way is to run
% \begin{center}
%   |latex --shell-escape |\meta{document}
% \end{center}
% twice, since the first run will extract the MGL code, execute it and include some of the resulting graphics, while the second run will include the remaining graphics; the second way is to run |latex |\meta{document} to extract the MGL code, then execute the generated scripts with the program |mglconv| (which comes with MathGL), and execute |latex |\meta{document} once more to include the graphics.
% 
% \subsection{Environments for MGL code embedding}
% \DescribeEnv{mgl}\noindent The main environment defined by \textsf{\mglTeX} is |mgl|. It extracts its contents to a general script, called \meta{document}.mgl, where \meta{document} stands for the name of the \LaTeX{} file being compiled; this script is compiled, and the corresponding image is included. Its syntax is:
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mgl}|\oarg{key-val list}\\[0.5em]
%       \hss\meta{MGL code}\hss\\[0.5em]
%     |\end{mgl}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% Here, \meta{key-val list} accepts the same optional arguments as the |\includegraphics| command from the \textsf{graphicx} package, plus an additional one, |imgext|, which can be used to specify the extension to save the graphic. The \meta{MGL code} doesn't need to contain any specific instruction to create the image, since \textsf{\mglTeX} takes care of that.
% 
% \DescribeEnv{mgladdon} This environment adds its contents to the general script \meta{document}.mgl, but it doesn't produce any image. It doesn't require any kind of arguments.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mgladdon}|\\[0.5em]
%       \hss\meta{MGL code}\hss\\[0.5em]
%     |\end{mgladdon}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \DescribeEnv{mglcode} This is the same as the |mgl| environment, but the corresponding code is written \emph{verbatim} to a separate script, whose name is specified as mandatory argument. It accepts the same optional arguments as |mgl|.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mglcode}|\oarg{key-val list}\marg{script\_name}\\[0.5em]
%       \hss\meta{MGL code}\hss\\[0.5em]
%     |\end{mglcode}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \DescribeEnv{mglscript} The code within |mglscript| is written verbatim to a script whose name is specified as mandatory argument, but no image is produced. It is useful for creation of MGL scripts which can be later post-processed by another package, like \textsf{listings}.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mglscript}|\marg{script\_name}\\[0.5em]
%       \hss\meta{MGL code}\hss\\[0.5em]
%     |\end{mglscript}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \DescribeEnv{mglfunc} This is used to define MGL functions within the general script \meta{document}.mgl. It takes one mandatory argument, which is the name of the function, plus one optional argument, which specifies the number of arguments of the function. The environment needs to contain only the body of the function, since the lines ``func \meta{function\_name} \meta{number of arguments}'' and ``return'' are appended automatically at the beginning and the end, respectively. The resulting code is written at the end of the general script, after the |stop| command, which is also written automatically.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mglfunc}|\oarg{number of arguments}\marg{function\_name}\\[0.5em]
%       \hss\meta{MGL function body}\hss\\[0.5em]
%     |\end{mglfunc}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \subsection{Fast creation of graphics}
% \noindent\textsf{\mglTeX} defines a convenient way to work with many graphics that have exactly the same settings (for example, same angles of rotation, same type of grid, etc.): instead of writing repetitive code every time it's needed, it can be stored in memory with the |mglplotsettings| environment, and then can be used when needed with the |\mglplot| command.
% 
% \DescribeEnv{mglplotsettings} This environment stores its contents in memory for later use. It accepts one mandatory argument, which is a keyword (name) to be associated to the corresponding block of code, so different blocks of code can be stored with different names.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mglplotsettings}|\marg{keyword}\\[0.5em]
%       \hss\meta{MGL code}\hss\\[0.5em]
%     |\end{mglplotsettings}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \DescribeMacro{\mglplot} This command is used for fast generation of graphics with default settings, and can be used in parallel with the |mglplotsettings| environment. It accepts one mandatory argument which consists of MGL instructions, separated by the symbol ``:'', which can span through various text lines. It also accepts the same optional arguments as the |mgl| environment, plus an additional one, called |settings|, which can be used to specify a keyword used in a |mglplotsettings| environment. If the |settings| option is specified, the code in the mandatory argument will be appended to the block of code of the corresponding |mglplotsettings| environment.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\mglplot|\oarg{key-val list}\marg{MGL code}\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \subsection{Verbatim-like environments}
% \DescribeEnv{mglblock}\noindent It writes its contents \emph{verbatim} to a file, whose name is given as mandatory argument, and then it also typesets its contents on the \LaTeX{} document, numbering each line of code.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mglblock}|\marg{script\_name}\\[0.5em]
%       \hss\meta{MGL code}\hss\\[0.5em]
%     |\end{mglblock}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \DescribeEnv{mglverbatim} It typesets its contents to the \LaTeX{} document, numbering each line of code.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\begin{mglverbatim}|\\[0.5em]
%       \hss\meta{MGL code}\hss\\[0.5em]
%     |\end{mglverbatim}|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \subsection{Working with external scripts}
% \noindent In case of having MGL scripts in their own files, \textsf{\mglTeX} can work with them without needing to transcript them to the \LaTeX{} document.
% 
% \DescribeMacro{\mglgraphics} This command takes one mandatory argument, which is the name of an external MGL script, which will be automatically executed, and the resulting image will be included. The same optional arguments as the |mgl| environment are accepted.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\mglgraphics|\oarg{key-val list}\marg{script\_name}\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \DescribeMacro{\mglinclude} This command takes one mandatory argument, which is the name of an external MGL script, which will be automatically transcript \emph{verbatim} on the \LaTeX{} document, and each line of code will be numerated.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\mglinclude|\marg{script\_name}\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \subsection{Additional commands}
% \DescribeMacro{\mgldir}\noindent This command can be used to specify where \textsf{\mglTeX} should create the MGL scripts and corresponding images. This is useful, for example, to avoid a lot of scripts and images from polluting the current directory.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\mgldir|\marg{directory}\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% This command must be used in the preamble of the document, since the first MGL script is created at the moment of the |\begin{document}| command; trying to use it somewhere else will issue an error. On the other hand, it is the responsibility of the user to create the \meta{directory}, since \textsf{\mglTeX} won't do it automatically.
% 
% \DescribeMacro{\mglTeX} This command just pretty-prints the name of the package.
% \begin{center}
%   \begin{tabular}{l}
%     \hline\\[-0.75em]
%     |\mglTeX|\\[0.25em]
%     \hline
%   \end{tabular}
% \end{center}
% 
% \subsection{Behavior of \textsf{\mglTeX}}
% \noindent As a convenient feature, the environments |mglcode|, |mglscript| and |mglblock| will automatically check if they are being used to create different scripts with the same name, in which case \textsf{\mglTeX} will issue a warning; however, if one of these environments overwrite an external script (not embedded in the document), it won't be noticed. Likewise, the user will be warned if the environment |mglfunc| is being used to create different MGL functions with the same name.
% 
% When \textsf{\mglTeX} is unable to find a graphic that is supposed to include, instead of producing an error, it will warn the user about it, and will display a box in the corresponding position of the document, like the following one:
% \begin{center}
%   \framebox[10em]{
%     \centering
%     \bfseries\Huge
%     \vbox{MGL\\image\\not\\found}
%   }
% \end{center}
% Notice that the first time \LaTeX{} is executed, many of these boxes will appear in the document because the graphics from the MGL scripts are created, but not all are included (until \LaTeX{} is run for the second time).
% 
% \StopEventually{}
% \section{Implementation}
%    \begin{macrocode}

\RequirePackage{keyval}
\RequirePackage{graphicx}

\DeclareOption{draft}{%
  \PassOptionsToPackage{\CurrentOption}{graphicx}%
}
\DeclareOption{final}{%
  \PassOptionsToPackage{\CurrentOption}{graphicx}%
}

\DeclareGraphicsExtensions{.png,.eps,.jpg,.jpeg,.bps,.pdf,.epsz,.eps.gz,.bpsz,.bps.gz,.gif}
%\DeclareGraphicsExtensions{.png,.eps,.jpg,.jpeg,.bps,.pdf,.gif}
%\DeclareGraphicsRule{*}{eps}{*}{}
%\DeclareGraphicsRule{.eps.gz}{eps}{.eps.bb}{`gunzip -c #1}%   gzipped EPS
%\DeclareGraphicsRule{.epsz}{eps}{.eps.bb}{`gunzip -c #1}%   gzipped EPS
%\DeclareGraphicsRule{.bps.gz}{eps}{.bps.bb}{`gunzip -c #1}%   gzipped EPS
%\DeclareGraphicsRule{.bpsz}{eps}{.bps.bb}{`gunzip -c #1}%   gzipped EPS

\DeclareOption{jpg}{\def\mgl@image@ext{.jpg}}
\DeclareOption{jpeg}{\def\mgl@image@ext{.jpeg}}
\DeclareOption{pdf}{\def\mgl@image@ext{.pdf}}
\DeclareOption{png}{\def\mgl@image@ext{.png}}
\DeclareOption{eps}{\def\mgl@image@ext{.eps}}
\DeclareOption{epsz}{\def\mgl@image@ext{.eps.gz}}
\DeclareOption{bps}{\def\mgl@image@ext{.bps}}
\DeclareOption{bpsz}{\def\mgl@image@ext{.bps.gz}}
\DeclareOption{gif}{\def\mgl@image@ext{.gif}}

\DeclareOption{tex}{\def\mgl@image@ext{.tex}}
%\DeclareOption{svg}{\def\mgl@image@ext{.svg}}
%\DeclareOption{svgz}{\def\mgl@image@ext{.svgz}}
%\DeclareOption{bmp}{\def\mgl@image@ext{.bmp}}
%\DeclareOption{tga}{\def\mgl@image@ext{.tga}}
%\DeclareOption{mgld}{\def\mgl@image@ext{.mgld}}
%\DeclareOption{json}{\def\mgl@image@ext{.json}}
%\DeclareOption{jsonz}{\def\mgl@image@ext{.jsonz}}
%\DeclareOption{obj}{\def\mgl@image@ext{.obj}}
%\DeclareOption{xyz}{\def\mgl@image@ext{.xyz}}
%\DeclareOption{stl}{\def\mgl@image@ext{.stl}}
%\DeclareOption{off}{\def\mgl@image@ext{.off}}
%\DeclareOption{prc}{\def\mgl@image@ext{.prc}}

\ExecuteOptions{final,eps}
\ProcessOptions*

\define@key{mgl@keys}{bb}{\g@addto@macro{\graph@keys}{bb=#1,}}
\define@key{mgl@keys}{bbllx}{\g@addto@macro{\graph@keys}{bbllx=#1,}}
\define@key{mgl@keys}{bblly}{\g@addto@macro{\graph@keys}{bblly=#1,}}
\define@key{mgl@keys}{bburx}{\g@addto@macro{\graph@keys}{bburx=#1,}}
\define@key{mgl@keys}{bbury}{\g@addto@macro{\graph@keys}{bbury=#1,}}
\define@key{mgl@keys}{natwidth}{\g@addto@macro{\graph@keys}{natwidth=#1,}}
\define@key{mgl@keys}{natheight}{\g@addto@macro{\graph@keys}{natheight=#1,}}
\define@key{mgl@keys}{hiresbb}{\g@addto@macro{\graph@keys}{hiresbb=#1,}}
\define@key{mgl@keys}{viewport}{\g@addto@macro{\graph@keys}{viewport=#1,}}
\define@key{mgl@keys}{trim}{\g@addto@macro{\graph@keys}{trim=#1,}}
\define@key{mgl@keys}{angle}{\g@addto@macro{\graph@keys}{angle=#1,}}
\define@key{mgl@keys}{origin}{\g@addto@macro{\graph@keys}{origin=#1,}}
\define@key{mgl@keys}{width}{\g@addto@macro{\graph@keys}{width=#1,}}
\define@key{mgl@keys}{height}{\g@addto@macro{\graph@keys}{height=#1,}}
\define@key{mgl@keys}{totalheight}{\g@addto@macro{\graph@keys}{totalheight=#1,}}
\define@key{mgl@keys}{keepaspectratio}{\g@addto@macro{\graph@keys}{keepaspectratio=#1,}}
\define@key{mgl@keys}{scale}{\g@addto@macro{\graph@keys}{scale=#1,}}
\define@key{mgl@keys}{clip}[true]{\g@addto@macro{\graph@keys}{clip=#1,}}
\define@key{mgl@keys}{draft}[false]{\g@addto@macro{\graph@keys}{draft=#1,}}
\define@key{mgl@keys}{type}{\g@addto@macro{\graph@keys}{type=#1,}}
\define@key{mgl@keys}{ext}{\g@addto@macro{\graph@keys}{ext=#1,}}
\define@key{mgl@keys}{read}{\g@addto@macro{\graph@keys}{read=#1,}}
\define@key{mgl@keys}{command}{\g@addto@macro{\graph@keys}{command=#1,}}
\define@key{mgl@keys}{imgext}{\def\mgl@image@ext{.#1}}

\define@key{mglplot@keys}{bb}{\g@addto@macro{\graph@keys}{bb=#1,}}
\define@key{mglplot@keys}{bbllx}{\g@addto@macro{\graph@keys}{bbllx=#1,}}
\define@key{mglplot@keys}{bblly}{\g@addto@macro{\graph@keys}{bblly=#1,}}
\define@key{mglplot@keys}{bburx}{\g@addto@macro{\graph@keys}{bburx=#1,}}
\define@key{mglplot@keys}{bbury}{\g@addto@macro{\graph@keys}{bbury=#1,}}
\define@key{mglplot@keys}{natwidth}{\g@addto@macro{\graph@keys}{natwidth=#1,}}
\define@key{mglplot@keys}{natheight}{\g@addto@macro{\graph@keys}{natheight=#1,}}
\define@key{mglplot@keys}{hiresbb}{\g@addto@macro{\graph@keys}{hiresbb=#1,}}
\define@key{mglplot@keys}{viewport}{\g@addto@macro{\graph@keys}{viewport=#1,}}
\define@key{mglplot@keys}{trim}{\g@addto@macro{\graph@keys}{trim=#1,}}
\define@key{mglplot@keys}{angle}{\g@addto@macro{\graph@keys}{angle=#1,}}
\define@key{mglplot@keys}{origin}{\g@addto@macro{\graph@keys}{origin=#1,}}
\define@key{mglplot@keys}{width}{\g@addto@macro{\graph@keys}{width=#1,}}
\define@key{mglplot@keys}{height}{\g@addto@macro{\graph@keys}{height=#1,}}
\define@key{mglplot@keys}{totalheight}{\g@addto@macro{\graph@keys}{totalheight=#1,}}
\define@key{mglplot@keys}{keepaspectratio}{\g@addto@macro{\graph@keys}{keepaspectratio=#1,}}
\define@key{mglplot@keys}{scale}{\g@addto@macro{\graph@keys}{scale=#1,}}
\define@key{mglplot@keys}{clip}[true]{\g@addto@macro{\graph@keys}{clip=#1,}}
\define@key{mglplot@keys}{draft}[false]{\g@addto@macro{\graph@keys}{draft=#1,}}
\define@key{mglplot@keys}{type}{\g@addto@macro{\graph@keys}{type=#1,}}
\define@key{mglplot@keys}{ext}{\g@addto@macro{\graph@keys}{ext=#1,}}
\define@key{mglplot@keys}{read}{\g@addto@macro{\graph@keys}{read=#1,}}
\define@key{mglplot@keys}{command}{\g@addto@macro{\graph@keys}{command=#1,}}
\define@key{mglplot@keys}{outext}{\def\mglplot@output@ext{.#1}}
\define@key{mglplot@keys}{settings}{\def\mglplot@settings{#1}}

\def\mgl@dir{}
\def\mgldir#1{%
  \def\mgl@dir{#1}%
}
\@onlypreamble\mgldir

\newwrite\mgl@script
\AtBeginDocument{%
  \immediate\openout\mgl@script="\mgl@dir\jobname.mgl"%
}
\AtEndDocument{%
  \immediate\write\mgl@script{}%
  \immediate\write\mgl@script{stop}%
  \mgl@func%
  \immediate\closeout\mgl@script%
  \immediate\write18{mglconv -n "\mgl@dir\jobname.mgl"}%
}

\def\mglplotsettings@defined{}
\newcommand\mglplotsettings[1][generic]{%
  \test@mglplotsettings@defined{#1}%
  \expandafter\def\csname mgl@setup@#1\endcsname{\immediate\write\mgl@script{}}%
  \g@addto@macro{\mglplotsettings@defined}{#1,}%
  \let\do\@makeother \dospecials%
  \endlinechar`\^^M \catcode`\^^M\active%
  \catcode`\ =10%
  \expandafter\mglplotsettings@write@line%
}
\def\test@mglplotsettings@defined#1{%
  \def\this@setup{#1}%
  \@for\mglplotsettings@name:=\mglplotsettings@defined\do{%
    \ifx\this@mglplotsettings\mglplotsettings@name%
      \PackageWarning{\mgl@name}{Redefining "#1" setup for \noexpand\mglplot}%
    \fi%
  }%
}
\begingroup%
  \catcode`\^^M\active%
  \gdef\mglplotsettings@write@line#1^^M{%
    \def\next@action{%
      \expandafter\g@addto@macro\csname mgl@setup@\this@setup\endcsname{\immediate\write\mgl@script{#1}}%
      \mglplotsettings@write@line%
    }%
    \test@end@mglplotsettings{#1}%
    \next@action%
  }%
\endgroup
\begingroup%
  \escapechar=-1 \relax%
  \xdef\end@mglplotsettings{\string\\end\string\{mglplotsettings\string\}}%
\endgroup
\def\test@end@mglplotsettings#1{%
  \edef\this@line{#1}%
  \ifx\this@line\end@mglplotsettings%
    \def\next@action{\end{mglplotsettings}}%
  \fi%
}
\def\endmglplotsettings{}

\def\TeX@ext{.tex}
\newcounter{mgl@image@no}

\def\mglplot{%
  \@ifnextchar[{\@mglplot}{\@mglplot[]}%
}
\def\@mglplot[#1]{%
  \def\mglplot@settings{generic}%
  \def\graph@keys{}%
  \setkeys{mglplot@keys}{#1}%
  \stepcounter{mgl@image@no}%
  \ifx\csname mgl@setup@\mglplot@settings\endcsname\@undefined%
    \PackageError{\mgl@name}{Setup "\mglplot@settings" undefined}{}%
  \else%
    \csname mgl@setup@\mglplot@settings\endcsname%
  \fi%
  \@@mglplot%
}
\long\def\@@mglplot#1{%
  \immediate\write\mgl@script{\detokenize{#1}}%
  \immediate\write\mgl@script{write '\mgl@dir\jobname-mgl-\arabic{mgl@image@no}\mgl@image@ext'}%
  \immediate\write\mgl@script{reset}%
  \mgl@include@image{\mgl@dir\jobname-mgl-\arabic{mgl@image@no}}%
}

\newcommand\mgl[1][]{%
  \def\graph@keys{}%
  \setkeys{mgl@keys}{#1}%
  \let\do\@makeother \dospecials%
  \endlinechar`\^^M \catcode`\^^M\active%
  \catcode`\ =10%
  \mgl@write@line%
}
\begingroup%
  \escapechar=-1 \relax%
  \xdef\end@mgl{\string\\end\string\{mgl\string\}}%
\endgroup
\begingroup%
  \catcode`\^^M\active%
  \gdef\mgl@write@line#1^^M{%
    \def\next@action{%
      \immediate\write\mgl@script{#1}%
      \mgl@write@line%
    }%
    \test@end@mgl{#1}%
    \next@action%
  }%
\endgroup
\def\test@end@mgl#1{%
  \edef\this@line{#1}%
  \ifx\this@line\end@mgl%
    \def\next@action{\end{mgl}}%
  \fi%
}
\def\endmgl{%
  \stepcounter{mgl@image@no}%
  \immediate\write\mgl@script{write '\mgl@dir\jobname-mgl-\arabic{mgl@image@no}\mgl@image@ext'}%
  \immediate\write\mgl@script{reset}%
  \mgl@include@image{\mgl@dir\jobname-mgl-\arabic{mgl@image@no}}%
}
\def\mgl@include@image#1{%
  \ifx\mgl@image@ext\TeX@ext%
    \IfFileExists{#1.tex}{%
      \include{#1}%
    }{%
      \mgl@img@not@found{#1}%
    }%
  \else%
  \def\next@action{\mgl@img@not@found{#1}}%
    \@for\img@ext:=\Gin@extensions\do{%
      \IfFileExists{#1\img@ext}{%
        \def\next@action{%
          \expandafter\includegraphics\expandafter[\graph@keys]{#1}%
        }%
      }{}%
    }%
    \next@action%
  \fi%
}
\def\mgl@img@not@found#1{%
  \PackageWarning{\mgl@name}{MGL image "#1" not found}%
  \framebox[10em]{%
    \centering%
    \bfseries\Huge%
    \vbox{MGL\\image\\not\\found}%
  }%
}

\bgroup%
  \escapechar=-1\relax%
  \xdef\end@mgladdon{\string\\end\string\{mgladdon\string\}}%
\egroup%
\newenvironment{mgladdon}{%
  \def\test@end@mgl##1{%
    \edef\this@line{##1}%
    \ifx\this@line\end@mgladdon%
      \def\next@action{\end{mgladdon}}%
    \fi%
  }%
  \mgl[]%
}{}

\def\mgl@script@written{}
\newwrite\mgl@out@stream
\newcommand\mglcode[2][]{%
  \def\graph@keys{}%
  \setkeys{mgl@keys}{#1}%
  \test@mgl@script@written{#2}%
  \xdef\mgl@script@written{\mgl@script@written#2,}%
  \def\this@script{#2}%
  \immediate\openout\mgl@out@stream=\mgl@dir\this@script.mgl%
  \let\do\@makeother \dospecials%
  \endlinechar`\^^M \catcode`\^^M\active%
  \obeyspaces%
  \mglcode@write@line%
}
\def\test@mgl@script@written#1{%
  \edef\this@script{#1}%
  \@for\mgl@script@name:=\mgl@script@written\do{%
    \ifx\this@script\mgl@script@name%
      \PackageWarning{\mgl@name}{Overwriting MGL script "\this@script.mgl"}%
    \fi%
  }%
}
\def\mglcode@write@line#1{%
  \let\next@action\mglcode@write@line%
  \expandafter\if#1\^^M%
    \immediate\write\mgl@out@stream{\the\mgl@line}%
    \mgl@line{}%
    \mgl@word{}%
  \else\expandafter\if#1\space%
    \mgl@word{}%
    \mgl@line\expandafter{\the\mgl@line#1}%
  \else%
    \mgl@word\expandafter{\the\mgl@word#1}%
    \mgl@line\expandafter{\the\mgl@line#1}%
    \test@end@mglcode{\the\mgl@word}%
  \fi\fi%
  \next@action%
}
\begingroup%
  \escapechar=-1\relax%
  \xdef\end@mglcode{\string\\end\string\{mglcode\string\}}%
\endgroup%
\def\test@end@mglcode#1{%
  \edef\this@word{#1}%
  \ifx\this@word\end@mglcode%
    \def\next@action{\end{mglcode}}%
  \fi%
}
\def\endmglcode{%
  \immediate\closeout\mgl@out@stream%
  \immediate\write18{mglconv "\mgl@dir\this@script.mgl" -o "\mgl@dir\this@script\mgl@image@ext"}%
  \mgl@include@image{\mgl@dir\this@script}%
}

\bgroup%
  \escapechar=-1\relax%
  \xdef\end@mglscript{\string\\end\string\{mglscript\string\}}%
\egroup%
\newenvironment{mglscript}[1]{%
  \def\test@end@mglcode##1{%
    \edef\this@word{##1}%
    \ifx\this@word\end@mglscript%
      \def\next@action{\end{mglscript}}%
    \fi%
  }%
  \mglcode{#1}%
}{%
  \immediate\closeout\mgl@out@stream%
}

\def\mglfunc@defined{}
\def\mgl@func{}
\newcommand\mglfunc[2][0]{%
  \test@mglfunc@defined{#2}%
  \g@addto@macro{\mglfunc@defined}{#2,}%
  \let\do\@makeother \dospecials%
  \endlinechar`\^^M \catcode`\^^M\active%
  \catcode`\ =10%
  \g@addto@macro{\mgl@func}{\immediate\write\mgl@script{}}%
  \g@addto@macro{\mgl@func}{\immediate\write\mgl@script{func '#2' #1}}%
  \expandafter\mglfunc@ignore@line%
}
\def\test@mglfunc@defined#1{%
  \def\this@func{#1}%
  \@for\mglfunc@name:=\mglfunc@defined\do{%
    \ifx\this@func\mglfunc@name%
      \PackageWarning{\mgl@name}{MGL function "#1" has multiple definitions}%
    \fi%
  }%
}
\begingroup%
  \catcode`\^^M\active%
  \gdef\mglfunc@ignore@line#1^^M{%
    \expandafter\mglfunc@write@line%
  }
  \gdef\mglfunc@write@line#1^^M{%
    \def\next@action{%
      \g@addto@macro{\mgl@func}{\immediate\write\mgl@script{#1}}%
      \mglfunc@write@line%
    }%
    \test@end@mglfunc{#1}%
    \next@action%
  }%
\endgroup
\begingroup%
  \escapechar=-1 \relax%
  \xdef\end@mglfunc{\string\\end\string\{mglfunc\string\}}%
\endgroup
\def\test@end@mglfunc#1{%
  \edef\this@line{#1}%
  \ifx\this@line\end@mglfunc%
    \def\next@action{\end{mglfunc}}%
  \fi%
}
\def\endmglfunc{%
  \g@addto@macro{\mgl@func}{\immediate\write\mgl@script{return}}%
}

\def\mglblock#1{%
  \test@mgl@script@written{#1}%
  \xdef\mgl@script@written{\mgl@script@written#1,}%
  \def\this@script{#1}%
  \let\do\@makeother \dospecials%
  \endlinechar`\^^M \catcode`\^^M\active%
  \obeyspaces%
  \immediate\openout\mgl@out@stream="\mgl@dir\this@script.mgl"%
  \mglblock@ignore@line%
}
\def\mglblock@ignore@line#1{%
  \mglblock@write@line%
}
\def\mglblock@write@line#1{%
  \let\next@action\mglblock@write@line%
  \expandafter\if#1\^^M%
    \immediate\write\mgl@out@stream{\the\mgl@line}%
    \mgl@line{}%
    \mgl@word{}%
  \else\expandafter\if#1\space%
    \mgl@word{}%
    \mgl@line\expandafter{\the\mgl@line#1}%
  \else%
    \mgl@word\expandafter{\the\mgl@word#1}%
    \mgl@line\expandafter{\the\mgl@line#1}%
    \test@end@mglblock{\the\mgl@word}%
  \fi\fi%
  \next@action%
}
\begingroup%
  \escapechar=-1\relax%
  \xdef\end@mglblock{\string\\end\string\{mglblock\string\}}%
\endgroup%
\def\test@end@mglblock#1{%
  \edef\this@word{#1}%
  \ifx\this@word\end@mglblock%
    \def\next@action{\end{mglblock}}%
  \fi%
}
\newread\mgl@in@stream
\def\endmglblock{%
  \immediate\closeout\mgl@out@stream%
  \immediate\openin\mgl@in@stream="\mgl@dir\this@script.mgl"%
  \begingroup%
  \list{\itshape\footnotesize\arabic{mgl@verb@line@no}.}{}%
  \setlength{\labelsep}{1em}%
  \itemsep\z@skip%
  \leftskip\z@skip\rightskip\z@skip%
  \verbatim@font%
  \parindent\z@\parfillskip\@flushglue\parskip\z@skip%
  \@vobeyspaces%
  \mglblock@read@line%
}
\def\mglblock@read@line{%
  \stepcounter{mgl@verb@line@no}%
  \read\mgl@in@stream to \this@line%
  \ifeof\mgl@in@stream%
    \def\next@action{%
      \immediate\closein\mgl@in@stream%
      \endlist%
      \endgroup%
    }%
  \else%
    \def\next@action{%
      \item\mbox{\this@line}%
      \mglblock@read@line%
    }%
  \fi%
  \next@action%
}

\newcounter{mgl@verb@line@no}
\def\mglverbatim{%
  \setcounter{mgl@verb@line@no}{0}%
  \list{\itshape\footnotesize\arabic{mgl@verb@line@no}.}{}%
  \setlength{\labelsep}{1em}%
  \itemsep\z@skip%
  \leftskip\z@skip\rightskip\z@skip%
  \verbatim@font%
  \parindent\z@\parfillskip\@flushglue\parskip\z@skip%
  \let\do\@makeother \dospecials%
  \endlinechar`\^^M \catcode`\^^M\active%
  \obeyspaces%
  \mglverbatim@ignore@line%
}
\def\mglverbatim@ignore@line#1{%
  \mglverbatim@write@line%
}
\newtoks\mgl@word
\newtoks\mgl@line
\def\mglverbatim@write@line#1{%
  \let\next@action\mglverbatim@write@line%
  \expandafter\if#1\^^M%
    \stepcounter{mgl@verb@line@no}%
    \item\mbox{\the\mgl@line}%
    \mgl@line{}%
    \mgl@word{}%
  \else\expandafter\if#1\space%
    \mgl@word{}%
    \mgl@line\expandafter{\the\mgl@line#1}%
  \else%
    \mgl@word\expandafter{\the\mgl@word#1}%
    \mgl@line\expandafter{\the\mgl@line#1}%
    \test@end@mglverbatim{\the\mgl@word}%
  \fi\fi%
  \next@action%
}
\begingroup%
  \escapechar=-1\relax%
  \xdef\end@mglverbatim{\string\\end\string\{mglverbatim\string\}}%
\endgroup%
\def\test@end@mglverbatim#1{%
  \edef\this@word{#1}%
  \ifx\this@word\end@mglverbatim%
    \def\next@action{\end{mglverbatim}}%
  \fi%
}
\def\endmglverbatim{\endlist}

\newcommand\mglgraphics[2][]{%
  \def\graph@keys{}%
  \setkeys{mgl@keys}{#1}%
  \immediate\write18{mglconv "\mgl@dir#2.mgl" -o "\mgl@dir#2\mgl@image@ext"}
  \mgl@include@image{\mgl@dir#2}%
}

\def\mglinclude#1{%
  \setcounter{mgl@verb@line@no}{0}%
  \immediate\openin\mgl@in@stream="\mgl@dir#1.mgl"%
  \begingroup%
  \list{\itshape\footnotesize\arabic{mgl@verb@line@no}.}{}%
  \setlength{\labelsep}{1em}%
  \itemsep\z@skip%
  \leftskip\z@skip\rightskip\z@skip%
  \verbatim@font%
  \parindent\z@\parfillskip\@flushglue\parskip\z@skip%
  \let\do\@makeother \dospecials%
  \endlinechar`\^^M \catcode`\^^M\active%
  \@vobeyspaces%
  \mglblock@read@line%
}

\def\mglTeX{mgl\TeX}
%    \end{macrocode}
% \Finale