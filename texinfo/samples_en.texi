@c ------------------------------------------------------------------
@chapter Samples
This chapter contain a lot of sample codes for all types of plots and for most important examples and hints. The same sample (with pictures) you can find at @uref{http://mathgl.sf.net/pictures.html}. 
@ifclear UDAV
Most of examples have the sample code on 5 languages: C++, MGL, C, Fortran and Python. However, I put only C++ code for some of examples due to a lot of them and clearency how to write code for other languages. All samples are divided on 6 large categories.
The minimal code to view the samples for different languages are following.
@strong{C++/Python code}
For compilation use: @code{g++ -o sample sample.cpp -lmgl}.
@verbatim
#include <mgl/mgl_zb.h>
int main()
{
    mglGraph gr;
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // put sample code here
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    gr.ShowImage(); return 0;
}
@end verbatim
@strong{MGL code}
For preview use: @code{mglview sample.mgl}.
@verbatim
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# put sample code here
#   -->   you may use sample as is :)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@end verbatim
@strong{C/Fortran code}
For compilation use: @code{gcc -o sample sample.c -lmgl}.
@verbatim
#include <mgl/mgl_c.h>
int main()
{
    HMGL gr = mgl_create_graph_zb(600,400);
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    /* put sample code here              */
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    mgl_show_image(gr,"",0);
    mgl_delete_graph(gr);
    return 0;
}
@end verbatim
@strong{Fortran code}
For compilation use: @code{gfortran -o sample sample.f90 -lmgl}. Note, fortran don't have argument checking. So you have to take special attention to pass real variables to real arguments of functions and integer variables to integer arguments of functions. There is no other special checking for that!!! Note you should use @code{integer} variables for any pointers (to data, to grapher, to parser and so on). Sometimes you may need to add @code{call} keyword before function calls.
@verbatim
integer gr, mgl_create_graph_zb
gr = mgl_create_graph_zb(600,400)
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! put sample code here
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
call mgl_show_image(gr,'',0)
call mgl_delete_graph(gr)
end
@end verbatim
@strong{Python}
For preview use: @code{python sample.py}.
@verbatim
from mathgl import *
gr = mglGraph();
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# put sample code here
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gr.ShowImage();
@end verbatim
@end ifclear
@menu
* 1D plotting samples::         
* 2D plotting samples::         
* 3D plotting samples::         
* Dual plotting samples::       
* Basic features::             
* Additional features::         
* Advanced features::           
@end menu
@c ------------------------------------------------------------------
@node 1D plotting samples, 2D plotting samples, , Samples
@section 1D plotting samples
@menu
* Plot sample::                 
* Radar sample::                
* Area sample::                 
* Bars sample::                 
* Barh sample::                 
* Step sample::                 
* Stem sample::                 
* Region sample::               
* Error sample::                
* BoxPlot sample::                
* Mark sample::                 
* TextMark sample::             
* Tube sample::                 
* Text sample::                 
* Torus sample::                
* Chart sample::                
@end menu
@c ------------------------------------------------------------------
@node Plot sample, Radar sample, , 1D plotting samples
@subsection Plot sample
@cindex Plot
@float
@image{../png/plot, 7cm}
@c @caption{Example of Plot. @tdref{plot}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
gr.Box();
gr.Plot(y);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
box
plot y
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,3,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_box(gr,1);
mgl_plot(gr,y,"");
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Radar sample, Area sample, Plot sample, 1D plotting samples
@subsection Radar sample
@cindex Radar
@float
@image{../png/radar, 7cm}
@c @caption{Example of Plot. @tdref{radar}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(10,3);
y.Modify("0.4*sin(pi*(2*x+y/2))+0.1*rnd");
gr.Radar(y,"#");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 10 3
modify y '0.4*sin(pi*(2*x+y/2))+0.1*rnd'
radar y '#'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(10,3,1);
mgl_data_modify(y,"0.4*sin(pi*(2*x+y/2))+0.1*rnd",0);
mgl_radar(gr,y,"#",-1);
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Area sample, Bars sample, Radar sample, 1D plotting samples
@subsection Area sample
@cindex Area
@float
@image{../png/area, 7cm}
@c @caption{Example of Area. @tdref{area}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
gr.Org=mglPoint(0,0);
gr.Box();
gr.Area(y);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
origin 0 0
box
area y
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,3,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_set_origin(gr,0.,0.,0.);
mgl_box(gr,1);
mgl_area(gr,y,"");
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Bars sample, Barh sample, Area sample, 1D plotting samples
@subsection Bars sample
@cindex Bars
@float
@image{../png/bars, 7cm}
@c @caption{Example of Bars. @tdref{bars}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(10,3);
y.Modify("0.8*sin(pi*(2*x+y/2))+0.2*rnd");
gr.Org=mglPoint(0,0);
gr.Box();
gr.Bars(y);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 10 3
modify y '0.8*sin(pi*(2*x+y/2))+0.2*rnd'
origin 0 0
box
bars y
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(10,3,1);
mgl_data_modify(y,"0.8*sin(pi*(2*x+y/2))+0.2*rnd");
mgl_set_origin(gr,0.,0.,0.);
mgl_box(gr,1);
mgl_bars(gr,y,"");
mgl_delete_data(y);
@end verbatim
@end ifclear

@c ------------------------------------------------------------------
@node Barh sample, Step sample, Bars sample, 1D plotting samples
@subsection Barh sample
@cindex Barh
@float
@image{../png/barh, 7cm}
@c @caption{Example of Barh. @tdref{barh}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(10,3);
y.Modify("0.8*sin(pi*(2*x+y/2))+0.2*rnd");
gr.Org=mglPoint(0,0);
gr.Box();
gr.Barh(y);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 10 3
modify y '0.8*sin(pi*(2*x+y/2))+0.2*rnd'
origin 0 0
box
barh y
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(10,3,1);
mgl_data_modify(y,"0.8*sin(pi*(2*x+y/2))+0.2*rnd");
mgl_set_origin(gr,0.,0.,0.);
mgl_box(gr,1);
mgl_barh(gr,y,"");
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Step sample, Stem sample, Barh sample, 1D plotting samples
@subsection Step sample
@cindex Step
@float
@image{../png/step, 7cm}
@c @caption{Example of Step. @tdref{step}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
gr.Box();
gr.Step(y);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
box
step y
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,3,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_box(gr,1);
mgl_step(gr,y,"");
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Stem sample, Region sample, Step sample, 1D plotting samples
@subsection Stem sample
@cindex Stem
@float
@image{../png/stem, 7cm}
@c @caption{Example of Stem. @tdref{stem}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
gr.Org=mglPoint(0,0);
gr.Box();
gr.Stem(y,"o");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
origin 0 0
box
stem y 'o'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,3,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_set_origin(gr,0.,0.,0.);
mgl_box(gr,1);
mgl_stem(gr,y,"o");
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Region sample, Error sample, Stem sample, 1D plotting samples
@subsection Region sample
@cindex Region
@float
@image{../png/region, 7cm}
@c @caption{Example of Region. @tdref{region}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y1(50), y2(50);
y1.Modify("0.3*sin(2*pi*x)");
y2.Modify("0.5+0.3*cos(2*pi*x)");
gr.Box();
gr.Region(y1,y2,"r");
gr.Plot(y1,"k2");
gr.Plot(y2,"k2");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y1 50
new y2 50
modify y1 '0.3*sin(2*pi*x)'
modify y2 '0.5+0.3*cos(2*pi*x)'
box
region y1 y2 'r'
plot y1 'k2'
plot y2 'k2'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y1 = mgl_create_data_size(50,1,1);
HMDT y2 = mgl_create_data_size(50,1,1);
mgl_data_modify(y1,"0.3*sin(2*pi*x)",0);
mgl_data_modify(y2,"0.5+0.3*cos(2*pi*x)",0);
mgl_box(gr,1);
mgl_region(gr,y1,y2,"r",1);
mgl_plot(gr,y1,"k2");
mgl_plot(gr,y2,"k2");
mgl_delete_data(y1);
mgl_delete_data(y2);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Error sample, BoxPlot sample, Region sample, 1D plotting samples
@subsection Error sample
@cindex Error
@float
@image{../png/error, 7cm}
@c @caption{Example of Error. @tdref{error}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,1), x0(10), y0(10), ex(10), ey(10);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
x0.Modify("2*x-1 + 0.1*rnd-0.05");
y0.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x) + 0.2*rnd-0.1");
ey.Modify("0.2"); ex.Modify("0.1");
gr.Box();
gr.Plot(y);
gr.Error(x0,y0,ex,ey,"ko");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50
new x0 10
new y0 10
new ex 10
new ey 10
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify x0 '2*x-1 + 0.1*rnd-0.05'
modify y0 '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x) + 0.2*rnd-0.1'
modify ey '0.2'
modify ex '0.1'
box
plot y
error x0 y0 ex ey 'ko'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,1,1);
HMDT x0 = mgl_create_data_size(10,1,1);
HMDT y0 = mgl_create_data_size(10,1,1);
HMDT ex = mgl_create_data_size(10,1,1);
HMDT ey = mgl_create_data_size(10,1,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(x0,"2*x-1 + 0.1*rnd-0.05",0);
mgl_data_modify(y0,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x) + 0.2*rnd-0.1",0);
mgl_data_modify(ey,"0.2",0); mgl_data_modify(ex,"0.1",0);
mgl_box(gr,1);
mgl_plot(gr,y,"");
mgl_error_exy(gr,x0,y0,ex,ey,"ko");
mgl_delete_data(x0); mgl_delete_data(y0);
mgl_delete_data(ex); mgl_delete_data(ey);
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node BoxPlot sample, Mark sample, Error sample, 1D plotting samples
@subsection BoxPlot sample
@cindex BoxPlot
@float
@image{../png/boxplot, 7cm}
@c @caption{Example of BoxPlot. @tdref{boxplot}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(10,7);
a.Modify("(2*rnd-1)^3/2");
gr.BoxPlot(a);
gr.Box();
gr.Plot(a," ko");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 10 7
modify a '(2*rnd-1)^3/2'
boxplot a
box:plot a ' ko'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(10,7,1);
mgl_data_modify(a,"(2*rnd-1)^3/2",0);
mgl_box(gr,1);
mgl_plot(gr,a," ko");
mgl_boxplot(gr,a,"");
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Mark sample, TextMark sample, BoxPlot sample, 1D plotting samples
@subsection Mark sample
@cindex Mark
@float
@image{../png/mark, 7cm}
@c @caption{Example of Mark. @tdref{mark}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3), y1(50);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
y1.Modify("0.5+0.3*cos(2*pi*x)");
gr.Box();
gr.Mark(y,y1,"bs");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
new y1 50
modify y1 '0.5+0.3*cos(2*pi*x)'
box
mark y y1 'bs'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,3,1);
HMDT y1 = mgl_create_data_size(50,1,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_data_modify(y1,"0.5+0.3*cos(2*pi*x)",0);
mgl_box(gr,1);
mgl_mark_y(gr,y,y1,"bs");
mgl_delete_data(y);
mgl_delete_data(y1);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node TextMark sample, Tube sample, Mark sample, 1D plotting samples
@subsection TextMark sample
@cindex TextMark
@float
@image{../png/textmark, 7cm}
@c @caption{Example of TextMark. @tdref{textmark}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3), y1(50);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
y1.Modify("0.5+0.3*cos(2*pi*x)");
gr.Box();
gr.TextMark(y,y1,"\\gamma");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
new y1 50
modify y1 '0.5+0.3*cos(2*pi*x)'
box
textmark y y1 '\gamma'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y, y1;
y = mgl_create_data_size(50,3,1);
y1 = mgl_create_data_size(50,1,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_data_modify(y1,"0.5+0.3*cos(2*pi*x)",0);
mgl_box(gr,1);
mgl_textmark_yr(gr,y,y1,"\\gamma","");
mgl_delete_data(y);
mgl_delete_data(y1);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Tube sample, Text sample, TextMark sample, 1D plotting samples
@subsection Tube sample
@cindex Tube
@float
@image{../png/tube, 7cm}
@c @caption{Example of Tube. @tdref{tube}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Tube(y,0.05);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
rotate 40 60
light on
box
tube y 0.05
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,3,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_tube(gr,y,0.05,"");
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Text sample, Torus sample, Tube sample, 1D plotting samples
@subsection Text sample
@cindex Text
@float
@image{../png/text, 7cm}
@c @caption{Example of Text. @tdref{text}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
gr.Box();
gr.Plot(y.SubData(-1,0));
gr.Text(y,"This is very long string drawn along a curve",":k");
gr.Text(y,"Another string drawn above a curve","T:r");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
box
plot y(:,0)
text y 'This is very long string drawn along a curve' ':k'
text y 'Another string drawn above a curve' 'T:r'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,1,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_box(gr,1);
mgl_plot(gr,y,"");
mgl_text_y(gr,y,"This is very long string drawn along a curve",":k",-1.);
mgl_text_y(gr,y,"Another string drawn above a curve","T:r",-1.);
mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Torus sample, Chart sample, Text sample, 1D plotting samples
@subsection Torus sample
@cindex Torus
@float
@image{../png/torus, 7cm}
@c @caption{Example of Torus. @tdref{torus}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y1(50), y2(50);
y1.Modify("0.5+0.3*cos(2*pi*x)");
y2.Modify("0.3*sin(2*pi*x)");
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Torus(y1,y2,"pz");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y1 50
new y2 50
modify y1 '0.5+0.3*cos(2*pi*x)'
modify y2 '0.3*sin(2*pi*x)'
rotate 40 60
light on
box
torus y1 y2 'pz'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y1 = mgl_create_data_size(50,1,1);
HMDT y2 = mgl_create_data_size(50,1,1);
mgl_data_modify(y1,"0.5+0.3*cos(2*pi*x)",0);
mgl_data_modify(y2,"0.3*sin(2*pi*x)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_torus(gr,y1,y2,"pz");
mgl_delete_data(y1);
mgl_delete_data(y2);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Chart sample, , Torus sample, 1D plotting samples
@subsection Chart sample
@cindex Chart
@float
@image{../png/chart, 7cm}
@c @caption{Example of Chart. @tdref{chart}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData ch(7,2);
ch.Modify("rnd+0.1");
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Chart(ch,"#");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new ch 7 2
modify ch 'rnd+0.1'
rotate 40 60
light on
box
chart ch
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT ch = mgl_create_data_size(7,2,1);
mgl_data_modify(ch,"rnd+0.1",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_chart(gr,ch,"#");
mgl_delete_data(ch);
@end verbatim
@end ifclear

@c ------------------------------------------------------------------
@node 2D plotting samples, 3D plotting samples, 1D plotting samples, Samples
@section 2D plotting samples
@menu
* Surf sample::                 
* Mesh sample::                 
* Fall sample::                 
* Belt sample::                 
* Tile sample::                 
* Boxs sample::                 
* Dens sample::                 
* Cont sample::                 
* ContF sample::                
* ContD sample::                
* ContV sample::                 
* Axial sample::                
* Grad sample::                 
@end menu
@c ------------------------------------------------------------------
@node Surf sample, Mesh sample, , 2D plotting samples
@subsection Surf sample
@cindex Surf
@float
@image{../png/surf, 7cm}
@c @caption{Example of Surf. @tdref{surf}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Surf(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
box
surf a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_surf(gr,a,0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Mesh sample, Fall sample, Surf sample, 2D plotting samples
@subsection Mesh sample
@cindex Mesh
@float
@image{../png/mesh, 7cm}
@c @caption{Example of Mesh. @tdref{mesh}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Box();
gr.Mesh(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
box
mesh a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_box(gr,1);
mgl_mesh(gr,a,0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Fall sample, Belt sample, Mesh sample, 2D plotting samples
@subsection Fall sample
@cindex Fall
@float
@image{../png/fall, 7cm}
@c @caption{Example of Fall. @tdref{fall}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Box();
gr.Fall(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
box
fall a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_box(gr,1);
mgl_fall(gr,a,0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Belt sample, Tile sample, Fall sample, 2D plotting samples
@subsection Belt sample
@cindex Belt
@float
@image{../png/belt, 7cm}
@c @caption{Example of Belt. @tdref{belt}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Belt(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
box
belt a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_belt(gr,a,0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Tile sample, Boxs sample, Belt sample, 2D plotting samples
@subsection Tile sample
@cindex Tile
@float
@image{../png/tile, 7cm}
@c @caption{Example of Tile. @tdref{tile}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Tile(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
box
tile a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_tile(gr,a,0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Boxs sample, Dens sample, Tile sample, 2D plotting samples
@subsection Boxs sample
@cindex Boxs
@float
@image{../png/boxs, 7cm}
@c @caption{Example of Boxs. @tdref{boxs}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);  gr.Light(true);
gr.Org = mglPoint(0,0,0);
gr.Box();
gr.Boxs(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
origin 0 0 0
box
boxs a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_set_origin(gr,0.,0.,0.);
mgl_box(gr,1);
mgl_boxs(gr,a,0,0.);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Dens sample, Cont sample, Boxs sample, 2D plotting samples
@subsection Dens sample
@cindex Dens
@cindex Colorbar
@float
@image{../png/dens, 7cm}
@c @caption{Example of Dens & Colorbar. @tdref{dens}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Box();
gr.Dens(a);
gr.Colorbar();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
box
dens a
colorbar
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_box(gr,1);
mgl_dens(gr,a,0,0);
mgl_colorbar(gr,"",0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Cont sample, ContF sample, Dens sample, 2D plotting samples
@subsection Cont sample
@cindex Cont
@float
@image{../png/cont, 7cm}
@c @caption{Example of Cont. @tdref{cont}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Box();
gr.Cont(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
box
cont a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_box(gr,1);
mgl_cont(gr,a,0,7,NAN);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node ContF sample, ContD sample, Cont sample, 2D plotting samples
@subsection ContF sample
@cindex ContF
@float
@image{../png/contf, 7cm}
@c @caption{Example of ContF. @tdref{contf}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);  gr.Light(true);
gr.Box();
gr.ContF(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
box
contf a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_contf(gr,a,0,7,NAN);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node ContD sample, ContV sample, ContF sample, 2D plotting samples
@subsection ContD sample
@cindex ContD
@float
@image{../png/contd, 7cm}
@c @caption{Example of ContD. @tdref{contd}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40), v(9);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
v.Fill(-1,1);
gr.Box();
gr.ContD(v,a);
gr.Colorbar(v);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
var v 9 -1 1
box
contd v a
colorbar v
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
HMDT v = mgl_create_data_size(9,1,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_fill(v,-1.,1.,'x');
mgl_box(gr,1);
mgl_contd_val(gr,v,a,0,0);
mgl_colorbar_val(gr,v,"",0);
mgl_delete_data(a);
mgl_delete_data(v);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node ContV sample, Axial sample, ContD sample, 2D plotting samples
@subsection ContV sample
@cindex Cont
@float
@image{../png/contv, 7cm}
@c @caption{Example of Cont. @tdref{cont}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Box();
gr.ContV(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
box
contv a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_box(gr,1);
mgl_contv(gr,a,0,7,NAN);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Axial sample, Grad sample, ContD sample, 2D plotting samples
@subsection Axial sample
@cindex Axial
@float
@image{../png/axial, 7cm}
@c @caption{Example of Axial. @tdref{axial}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Alpha(true);
gr.Box();
gr.Axial(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
alpha on
box
axial a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_set_alpha(gr,1);
mgl_box(gr,1);
mgl_axial(gr,a,"",3);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Grad sample, , Axial sample, 2D plotting samples
@subsection Grad sample
@cindex Grad
@float
@image{../png/grad, 7cm}
@c @caption{Example of Grad. @tdref{grad}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Box();  gr.Alpha(true);    gr.Dens(a);
gr.Grad(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
box:alpha on:dens a
grad a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_box(gr,1);
mgl_set_alpha(gr,1);
mgl_dens(gr,a,0,0);
mgl_grad(gr,a,0,0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node 3D plotting samples, Dual plotting samples, 2D plotting samples, Samples
@section 3D plotting samples
@menu
* Surf3 sample::                
* Cloud sample::               
* Dens3 sample::                
* Cont3 sample::                
* ContF3 sample::               
* Cont projection sample::      
* Dens projection sample::      
@end menu
@c ------------------------------------------------------------------
@node Surf3 sample, Cloud sample, , 3D plotting samples
@subsection Surf3 sample
@cindex Surf3
@float
@image{../png/surf3, 7cm}
@c @caption{Example of Surf3. @tdref{surf3}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
gr.Rotate(40,60);
gr.Light(true);
gr.Alpha(true);
gr.Box();
gr.Surf3(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
rotate 40 60
light on
alpha on
box
surf3 a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_set_alpha(gr,1);
mgl_box(gr,1);
mgl_surf3(gr,a,0,3);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Cloud sample, Dens3 sample, Surf3 sample, 3D plotting samples
@subsection Cloud sample
@cindex Cloud
@float
@image{../png/cloud, 7cm}
@c @caption{Example of Cloud. @tdref{cloud}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
gr.Rotate(40,60);
gr.Alpha(true);
gr.Box();
gr.Cloud(a,"wyrRk");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
rotate 40 60
alpha on
box
cloud a 'wyrRk'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_alpha(gr,1);
mgl_box(gr,1);
mgl_cloud(gr,a,"wyrRk",1.);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Dens3 sample, Cont3 sample, Cloud sample, 3D plotting samples
@subsection Dens3 sample
@cindex Dens3
@cindex Axis
@float
@image{../png/densa, 7cm}
@c @caption{Example of Dens3. @tdref{densa}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
gr.Rotate(40,60);  gr.Alpha(true);    gr.Org = mglPoint(0,0,0);
gr.Box();
gr.DensA(a);
gr.Axis();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
rotate 40 60
alpha on
origin 0 0 0
box
densa a
axis
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_alpha(gr,1);
mgl_set_origin(gr,0.,0.,0.);
mgl_box(gr,1);
mgl_dens3_all(gr,a,0);
mgl_axis(gr,"xyz");
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Cont3 sample, ContF3 sample, Dens3 sample, 3D plotting samples
@subsection Cont3 sample
@cindex Cont3
@float
@image{../png/conta, 7cm}
@c @caption{Example of Cont3. @tdref{conta}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
gr.Rotate(40,60);
gr.Box();
gr.ContA(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
rotate 40 60
box
conta a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_box(gr,1);
mgl_cont_all(gr,a,0,7);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node ContF3 sample, Cont projection sample, Cont3 sample, 3D plotting samples
@subsection ContF3 sample
@cindex ContF3
@float
@image{../png/contfa, 7cm}
@c @caption{Example of ContF3. @tdref{contfa}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
gr.Rotate(40,60);  gr.Light(true);
gr.Box();
gr.ContFA(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
rotate 40 60
light on
box
contfa a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_contf_all(gr,a,0,7);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Cont projection sample, Dens projection sample, ContF3 sample, 3D plotting samples
@subsection Cont projection sample
@cindex ContX
@cindex ContY
@cindex ContZ
@float
@image{../png/cont_xyz, 7cm}
@c @caption{Example of projection by Cont[XYZ]. @tdref{cont_xyz}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
gr.Rotate(40,60);
gr.Box();
gr.ContX(a.Sum("x"),"",-1);
gr.ContY(a.Sum("y"),"",1);
gr.ContZ(a.Sum("z"),"",-1);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
rotate 40 60
box
sum s a 'x'
contx s '' -1
sum s a 'y'
conty s '' 1
sum s a 'z'
contz s '' -1
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(60,50,40), s;
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_box(gr,1);
s=mgl_data_sum(a,"x"); mgl_cont_x(gr,s,0,-1.,7); mgl_delete_data(s);
s=mgl_data_sum(a,"y"); mgl_cont_y(gr,s,0,1.,7); mgl_delete_data(s);
s=mgl_data_sum(a,"z"); mgl_cont_z(gr,s,0,-1.,7); mgl_delete_data(s);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Dens projection sample, , Cont projection sample, 3D plotting samples
@subsection Dens projection sample
@cindex DensX
@cindex DensY
@cindex DensZ
@float
@image{../png/dens_xyz, 7cm}
@c @caption{Example of projection by Dens[XYZ]. @tdref{dens_xyz}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
gr.Rotate(40,60);
gr.Box();
gr.DensX(a.Sum("x"),"",-1);
gr.DensY(a.Sum("y"),"",1);
gr.DensZ(a.Sum("z"),"",-1);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
rotate 40 60
box
sum s a 'x'
densx s '' -1
sum s a 'y'
densy s '' 1
sum s a 'z'
densz s '' -1
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a, s; a = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_box(gr,1);
s=mgl_data_sum(a,"x"); mgl_dens_x(gr,s,0,-1.); mgl_delete_data(s);
s=mgl_data_sum(a,"y"); mgl_dens_y(gr,s,0,1.); mgl_delete_data(s);
s=mgl_data_sum(a,"z"); mgl_dens_z(gr,s,0,-1.); mgl_delete_data(s);
mgl_delete_data(a);
@end verbatim
@end ifclear


@c ------------------------------------------------------------------
@node Dual plotting samples, Basic features, 3D plotting samples, Samples
@section Dual plotting samples
@menu
* SurfC sample::                
* SurfA sample::                
* TileS sample::                
* Map sample::                  
* Traj sample::                 
* Vect sample::                 
* Flow sample::                 
* Pipe sample::                 
* Dew sample::                  
* Surf3C sample::               
* Surf3A sample::               
@end menu
@c ------------------------------------------------------------------
@node SurfC sample, SurfA sample, , Dual plotting samples
@subsection SurfC sample
@cindex SurfC
@float
@image{../png/surfc, 7cm}
@c @caption{Example of SurfC. @tdref{surfc}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40), b(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.SurfC(a,b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
new b 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
box
surfc a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
HMDT b = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_surfc(gr,a,b,0);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node SurfA sample, TileS sample, SurfC sample, Dual plotting samples
@subsection SurfA sample
@cindex SurfA
@float
@image{../png/surfa, 7cm}
@c @caption{Example of SurfA. @tdref{surfa}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40), b(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Alpha(true);
gr.Box();
gr.SurfA(a,b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
new b 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
alpha on
box
surfa a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a, b;
a = mgl_create_data_size(50,40,1);
b = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_set_alpha(gr,1);
mgl_box(gr,1);
mgl_surfa(gr,a,b,0);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node TileS sample, Map sample, SurfA sample, Dual plotting samples
@subsection TileS sample
@cindex TileS
@float
@image{../png/tiles, 7cm}
@c @caption{Example of TileS. @tdref{tiles}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40), b(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Box();
gr.TileS(a,b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
new b 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
box
tile a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a, b;
a = mgl_create_data_size(50,40,1);
b = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_box(gr,1);
mgl_tiles(gr,a,b,0);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Map sample, Traj sample, TileS sample, Dual plotting samples
@subsection Map sample
@cindex Map
@float
@image{../png/map, 7cm}
@c @caption{Example of Map. @tdref{map}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50, 40), b(50, 40);
gr.Puts(mglPoint(0, 0), "\\to", "", -1.4);
gr.Axis(mglPoint(-1,-1,-2),mglPoint(1,1,2));
gr.SubPlot(2, 1, 0);
a.Fill("x", gr.Min, gr.Max);	b.Fill("y", gr.Min, gr.Max);
gr.Puts(mglPoint(0, 1.1), "\\{x, y\\}", "C", -2);		gr.Box();
gr.Map(a, b, "brgk", 0, false);
gr.SubPlot(2, 1, 1);
a.Fill("(x^3+y^3)/2", gr.Min, gr.Max);
b.Fill("(x-y)/2", gr.Min, gr.Max);
gr.Puts(mglPoint(0, 1.1), "\\{\\frac{x^3+y^3}{2}, \\frac{x-y}{2}\\}", "C", -2);
gr.Box();
gr.Map(a, b, "brgk", 0, false);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
new b 50 40
text 0 0 '\to'
zrange -2 2
subplot 2 1 0
text 0 1.1 '\{x, y\}' '' -2
box
fill a 'x'
fill b 'y'
map a b 'brgk' 0 0
subplot 2 1 1
text 0 1.1 '\{\frac{x^3+y^3}{2}, \frac{x-y}{2}\}' '' -2
box
fill a '(x^3+y^3)/2'
fill b '(x-y)/2'
map a b 'brgk' 0 0
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
HMDT b = mgl_create_data_size(50,40,1);
mgl_puts_ext(gr, 0.,0.,0., "\\to", "", -1.4, 't');
mgl_set_axis_3d(gr,-1.,-1.,-2.,1.,1.,2.);
mgl_subplot(gr, 2, 1, 0);
mgl_data_fill_eq(gr, a, "x", 0, 0);
mgl_data_fill_eq(gr, b, "y", 0, 0);
mgl_puts_ext(gr, 0.,1.1,0., "\\{x, y\\}", "C", -2., 't');
mgl_box(gr,1);
mgl_map(gr, a, b, "brgk", 0, 0);
mgl_subplot(gr, 2, 1, 1);
mgl_data_fill_eq(gr, a, "(x^3+y^3)/2", 0, 0);
mgl_data_fill_eq(gr, b, "(x-y)/2", 0, 0);
mgl_puts_ext(gr, 0.,1.1,0., "\\{\\frac{x^3+y^3}{2}, \\frac{x-y}{2}\\}", "C", -2., 't');
mgl_box(gr,1);
mgl_map(gr, a, b, "brgk", 0, 0);
mgl_box(gr,1);
mgl_map(gr,a,b,0,0,1);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Traj sample, Vect sample, Map sample, Dual plotting samples
@subsection Traj sample
@cindex Traj
@float
@image{../png/traj, 7cm}
@c @caption{Example of Plot. @tdref{traj}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y(50,3), x(50), y1(50), y2(50);
y.Modify("0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
y.Modify("sin(2*pi*x)",1);
y.Modify("cos(2*pi*x)",2);
y1.Modify("0.5+0.3*cos(2*pi*x)");
y2.Modify("0.3*sin(2*pi*x)");
x.Fill(-1,1,'x');
gr.Box();
gr.Plot(x,y);
gr.Traj(x,y,y1,y2);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y 50 3
new x 50
new y1 50
new y2 50
modify y '0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)'
modify y 'sin(2*pi*x)' 1
modify y 'cos(2*pi*x)' 2
fill x -1 1
modify y1 '0.5+0.3*cos(2*pi*x)'
modify y2 '0.3*sin(2*pi*x)'
box
plot x y
traj x y y1 y2
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y = mgl_create_data_size(50,3,1);
HMDT x= mgl_create_data_size(50,1,1);
HMDT y1 = mgl_create_data_size(50,1,1);
HMDT y2 = mgl_create_data_size(50,1,1);
mgl_data_modify(y,"0.7*sin(2*pi*x) + 0.5*cos(3*pi*x) + 0.2*sin(pi*x)",0);
mgl_data_modify(y,"sin(2*pi*x)",1);
mgl_data_modify(y,"cos(2*pi*x)",2);
mgl_data_modify(x,"2*x-1",0);
mgl_data_modify(y1,"0.5+0.3*cos(2*pi*x)",0);
mgl_data_modify(y2,"0.3*sin(2*pi*x)",0);
mgl_box(gr,1);
mgl_plot_xy(gr,x,y,"");
mgl_traj_xy(gr,yx,y,y1,y2,"",0,0);
mgl_delete_data(y);  mgl_delete_data(y1);
mgl_delete_data(x);  mgl_delete_data(y2);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Vect sample, Flow sample, Traj sample, Dual plotting samples
@subsection Vect sample
@cindex Vect
@float
@image{../png/vect, 7cm}
@c @caption{Example of Vect. @tdref{vect}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(20,30), b(20,30);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Box();
gr.Vect(a,b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 20 30
new b 20 30
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
box
vect a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(20,30,1);
HMDT b = mgl_create_data_size(20,30,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_box(gr,1);
mgl_vect_2d(gr,a,b,0,0.);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Flow sample, Pipe sample, Vect sample, Dual plotting samples
@subsection Flow sample
@cindex Flow
@float
@image{../png/flow, 7cm}
@c @caption{Example of Flow. @tdref{flow}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(20,30), b(20,30);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Box();
gr.Flow(a,b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 20 30
new b 20 30
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
box
flow a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(20,30,1);
HMDT b = mgl_create_data_size(20,30,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_box(gr,1);
mgl_flow_2d(gr,a,b,0,5,1,0.);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Pipe sample, Dew sample, Flow sample, Dual plotting samples
@subsection Pipe sample
@cindex Pipe
@float
@image{../png/pipe, 7cm}
@c @caption{Example of Pipe. @tdref{pipe}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(20,30), b(20,30);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Light(true);
gr.Box();
gr.Pipe(a,b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 20 30
new b 20 30
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
light on
box
pipe a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(20,30,1);
HMDT b = mgl_create_data_size(20,30,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_pipe_2d(gr,a,b,0,0.05,5,1,0.);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Dew sample, Surf3C sample, Pipe sample, Dual plotting samples
@subsection Dew sample
@cindex Dew
@float
@image{../png/dew, 7cm}
@c @caption{Example of Dew. @tdref{dew}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(20,30), b(20,30);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Box();
gr.Light(true);
gr.Dew(a,b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 20 30
new b 20 30
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
box
light on
dew a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(20,30,1);
HMDT b = mgl_create_data_size(20,30,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_box(gr,1);
mgl_set_light(gr,1);
mgl_dew_2d(gr,a,b,0,0.);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Surf3C sample, Surf3A sample, Dew sample, Dual plotting samples
@subsection Surf3C sample
@cindex Surf3C
@float
@image{../png/surf3c, 7cm}
@c @caption{Example of Surf3C. @tdref{surf3c}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40), b(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
b.Modify("1-2*tanh(4*(x+y-1)^2)");
gr.Rotate(40,60);
gr.Light(true);
gr.Alpha(true);
gr.Box();
gr.Surf3C(a, b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
new b 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
modify b '1-2*tanh(4*(x+y-1)^2)'
rotate 40 60
light on
alpha on
box
surf3c a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(60,50,40);
HMDT b = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_data_modify(b,"1-2*tanh(4*(x+y-1)^2)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_set_alpha(gr,1);
mgl_box(gr,1);
mgl_surf3c(gr,a,b,0,3);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Surf3A sample, , Surf3C sample, Dual plotting samples
@subsection Surf3A sample
@cindex Surf3A
@float
@image{../png/surf3a, 7cm}
@c @caption{Example of Surf3A. @tdref{surf3a}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(60,50,40), b(60,50,40);
a.Modify("-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)");
b.Modify("1-2*tanh(4*(x+y-1)^2)");
gr.Rotate(40,60);
gr.Light(true);
gr.Alpha(true);
gr.Box();
gr.Surf3A(a, b);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 60 50 40
new b 60 50 40
modify a '-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)'
modify b '1-2*tanh(4*(x+y-1)^2)'
rotate 40 60
light on
alpha on
box
surf3a a b
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a, b; a = mgl_create_data_size(60,50,40);
b = mgl_create_data_size(60,50,40);
mgl_data_modify(a,"-2*((2*x-1)^2 + (2*y-1)^2 + (2*z-1)^4 - (2*z-1)^2 - 0.1)",0);
mgl_data_modify(b,"1-2*tanh(4*(x+y-1)^2)",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_set_alpha(gr,1);
mgl_box(gr,1);
mgl_surf3a(gr,a,b,0,3);
mgl_delete_data(a); mgl_delete_data(b);
@end verbatim
@end ifclear

@c ------------------------------------------------------------------
@node Basic features, Additional features, Dual plotting samples, Samples
@section Basic features
@menu
* 1D plot sample::              
* 2D plot sample::              
* 3D plot sample::              
* Line styles sample::          
* Arrow styles sample::         
* Text styles sample::          
* TeX parsing sample::          
* Font faces sample::           
* Colors sample::               
* Color schemes sample::        
* Normal transparency::         
* Glass-like transparency::     
* Lamp-like transparency::      
@end menu
@c ------------------------------------------------------------------
@node 1D plot sample, 2D plot sample, , Basic features
@subsection 1D plot sample
@cindex Plot
@cindex Bars
@cindex SubPlot
@float
@image{../png/sample8, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y0(50);		y0.Modify("sin(pi*(2*x-1))");
gr.SubPlot(2,2,0);
gr.Plot(y0);		gr.Box();

gr.SubPlot(2,2,1);
mglData y1(50,2);
y1.Modify("sin(pi*2*x-pi)");	y1.Modify("cos(pi*2*x-pi)/2",1);
gr.Plot(y1);		gr.Box();

mglData x(50);		x.Modify("cos(pi*2*x-pi)");
gr.Plot(x,y0,"Y+");

gr.Plot(y1.SubData(-1,0),y1.SubData(-1,1),"q|");

gr.SubPlot(2,2,2);	gr.Rotate(60,40);
mglData z(50);		z.Modify("2*x-1");
gr.Plot(x,y0,z);		gr.Box();

mglData y2(10,3);	y2.Modify("cos(pi*(2*x-1-y))");
y2.Modify("2*x-1",2);
gr.Plot(y2.SubData(-1,0),y2.SubData(-1,1),y2.SubData(-1,2),"bo ");

gr.SubPlot(2,2,3);	gr.Rotate(60,40);
gr.Bars(x,y0,z,"ri");		gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y0 50: modify y0 'sin(pi*(2*x-1))'
subplot 2 2 0
plot y0: box

subplot 2 2 1
new y1 50 2
modify y1 'sin(pi*2*x-pi)'
modify y1 'cos(pi*2*x-pi)/2' 1
plot y1: box

new x 50: modify x 'cos(pi*2*x-pi)'
plot x y0 'Y+'
plot y1(:,0) y(:,1) 'q|'

subplot 2 2 2:rotate 60 40
new z 50:   modify z '2*x-1'
plot x y0 z 'g':box
new y2 10 3
modify y2 'cos(pi*(2*x-1-y))'
modify y2 '2*x-1' 2
plot y2(:,0) y2(:,1) y2(:,2) 'bo '

subplot 2 2 3:rotate 60 40
bars x y0 z 'r':box
@end verbatim
@c ------------------------------------------------------------------
@node 2D plot sample, 3D plot sample, 1D plot sample, Basic features
@subsection 2D plot sample
@cindex Surf
@cindex Dens
@cindex Alpha
@float
@image{../png/sample9, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Light(true);
mglData a0(50,40);
a0.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.SubPlot(2,2,0); gr.Rotate(60,40);
gr.Surf(a0);       gr.Box();

mglData x(50,40),y(50,40),z(50,40);
x.Modify("0.8*sin(2*pi*x)*sin(pi*y)");
y.Modify("0.8*cos(2*pi*x)*sin(pi*y)");
z.Modify("0.8*cos(pi*y)");
gr.SubPlot(2,2,1); gr.Rotate(60,40);
gr.Surf(x,y,z,"BbwrR");    gr.Box();

mglData a1(50,40,3);
a1.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
a1.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*sin(3*pi*(x*y))",1);
a1.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",2);
gr.SubPlot(2,2,2); gr.Rotate(60,40);
gr.Alpha(true);
gr.Surf(a1);       gr.Box();

gr.SubPlot(2,2,3); gr.Rotate(60,40);
gr.Dens(a1);       gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
light on

new a0 50 40
modify a0 '0.6*sin(2*pi*x)*sin(3*pi*y)+0.4*cos(3*pi*(x*y))'
subplot 2 2 0:rotate 60 40
surf a0: box

new x 50 40: new y 50 40: new z 50 40
modify x '0.8*sin(2*pi*x)*sin(pi*y)'
modify y '0.8*cos(2*pi*x)*sin(pi*y)'
modify z '0.8*cos(pi*y)'
subplot 2 2 1:rotate 60 40
surf x y z 'bbwrr': box

new a1 50 40 3
modify a1 '0.6*sin(2*pi*x)*sin(3*pi*y)+0.4*cos(3*pi*(x*y))'
modify a1 '0.6*cos(2*pi*x)*cos(3*pi*y)+0.4*sin(3*pi*(x*y))' 1
modify a1 '0.6*cos(2*pi*x)*cos(3*pi*y)+0.4*cos(3*pi*(x*y))' 2
subplot 2 2 2:rotate 60 40
alpha on
surf a1: box

subplot 2 2 3: rotate 60 40
dens a1: box
@end verbatim
@c ------------------------------------------------------------------
@node 3D plot sample, Line styles sample, 2D plot sample, Basic features
@subsection 3D plot sample
@cindex Surf
@cindex Dens
@cindex Alpha
@float
@image{../png/sampleb, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Alpha(true);	gr.Light(true);	gr.Light(0,mglPoint(0,0,1));
mglData a(30,30,30), b(30,30,30);
a.Modify("exp(-16*((z-0.5)^2+(y-0.5)^2)/(1+4*x^2))");
b.Modify("16*((z-0.5)^2+(y-0.5)^2)*(x)/(1+4*x^2)");
gr.CAxis(0,1);

gr.SubPlot(2,2,0);	gr.Rotate(40,60);
gr.Surf3(a,"wgk");	gr.Box();
gr.SubPlot(2,2,1);	gr.Rotate(40,60);
gr.DensA(a);		gr.Box();	gr.Axis();
gr.SubPlot(2,2,2);	gr.Rotate(40,60);
gr.Cloud(a);		gr.Box();
gr.SubPlot(2,2,3);	gr.Rotate(40,60);
gr.Surf3A(b,a,"q");		gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
alpha on: light on
light 0 0 0 1
new a 30 30 30: new b 30 30 30
modify a 'exp(-16*((z-0.5)^2+(y-0.5)^2)/(1+4*x^2))'
modify b '16*((z-0.5)^2+(y-0.5)^2)*(x)/(1+4*x^2)'
caxis 0 1

subplot 2 2 0: rotate 40 60
surf3 a 'wgk': box
subplot 2 2 1: rotate 40 60
densa a: box: axis
subplot 2 2 2: rotate 40 60
cloud a: box
subplot 2 2 3: rotate 40 60
surf3a b a 'q': box
@end verbatim
@c ------------------------------------------------------------------
@node Line styles sample, Arrow styles sample, 3D plot sample, Basic features
@subsection Line styles sample
@cindex Mark
@cindex Line
@float
@image{../png/sample5, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
float d,x1,x2,x0,y=0.95;
d=0.3, x0=0.2, x1=0.5, x2=0.6;
gr.Line(mglPoint(x0,1-0*d),mglPoint(x1,1-0*d),"k-");	gr.Puts(mglPoint(x2,y-0*d),"Solid '-'","rL");
gr.Line(mglPoint(x0,1-1*d),mglPoint(x1,1-1*d),"k|");	gr.Puts(mglPoint(x2,y-1*d),"Long Dash '|'","rL");
gr.Line(mglPoint(x0,1-2*d),mglPoint(x1,1-2*d),"k;");	gr.Puts(mglPoint(x2,y-2*d),"Dash ';'","rL");
gr.Line(mglPoint(x0,1-3*d),mglPoint(x1,1-3*d),"k=");	gr.Puts(mglPoint(x2,y-3*d),"Small dash '='","rL");
gr.Line(mglPoint(x0,1-4*d),mglPoint(x1,1-4*d),"kj");	gr.Puts(mglPoint(x2,y-4*d),"Dash-dot 'j'","rL");
gr.Line(mglPoint(x0,1-5*d),mglPoint(x1,1-5*d),"ki");	gr.Puts(mglPoint(x2,y-5*d),"Small dash-dot 'i'","rL");
gr.Line(mglPoint(x0,1-6*d),mglPoint(x1,1-6*d),"k:");	gr.Puts(mglPoint(x2,y-6*d),"Dots ':'","rL");
gr.Line(mglPoint(x0,1-7*d),mglPoint(x1,1-7*d),"k ");	gr.Puts(mglPoint(x2,y-7*d),"None ' '","rL");

d=0.25; x1=-1; x0=-0.8;	y = -0.05;
gr.Mark(mglPoint(x1,5*d),'.');		gr.Puts(mglPoint(x0,y+5*d),"'.'","rL");
gr.Mark(mglPoint(x1,4*d),'+');		gr.Puts(mglPoint(x0,y+4*d),"'+'","rL");
gr.Mark(mglPoint(x1,3*d),'x');		gr.Puts(mglPoint(x0,y+3*d),"'x'","rL");
gr.Mark(mglPoint(x1,2*d),'*');		gr.Puts(mglPoint(x0,y+2*d),"'*'","rL");
gr.Mark(mglPoint(x1,d),'s');		gr.Puts(mglPoint(x0,y+d),"'s'","rL");
gr.Mark(mglPoint(x1,0),'d');		gr.Puts(mglPoint(x0,y),"'d'","rL");
gr.Mark(mglPoint(x1,-d,0),'o');	gr.Puts(mglPoint(x0,y-d),"'o'","rL");
gr.Mark(mglPoint(x1,-2*d,0),'^');	gr.Puts(mglPoint(x0,y-2*d),"'\\^'","rL");
gr.Mark(mglPoint(x1,-3*d,0),'v');	gr.Puts(mglPoint(x0,y-3*d),"'v'","rL");
gr.Mark(mglPoint(x1,-4*d,0),'<');	gr.Puts(mglPoint(x0,y-4*d),"'<'","rL");
gr.Mark(mglPoint(x1,-5*d,0),'>');	gr.Puts(mglPoint(x0,y-5*d),"'>'","rL");

d=0.25; x1=-0.5; x0=-0.3;	y = -0.05;
gr.Mark(mglPoint(x1,5*d),'C');		gr.Puts(mglPoint(x0,y+5*d),"'\\#.'","rL");
gr.Mark(mglPoint(x1,4*d),'P');		gr.Puts(mglPoint(x0,y+4*d),"'\\#+'","rL");
gr.Mark(mglPoint(x1,3*d),'X');		gr.Puts(mglPoint(x0,y+3*d),"'\\#x'","rL");
gr.Mark(mglPoint(x1,2*d),'Y');		gr.Puts(mglPoint(x0,y+2*d),"'\\#*'","rL");
gr.Mark(mglPoint(x1,d),'S');		gr.Puts(mglPoint(x0,y+d),"'\\#s'","rL");
gr.Mark(mglPoint(x1,0),'D');		gr.Puts(mglPoint(x0,y),"'\\#d'","rL");
gr.Mark(mglPoint(x1,-d,0),'O');	gr.Puts(mglPoint(x0,y-d),"'\\#o'","rL");
gr.Mark(mglPoint(x1,-2*d,0),'T');	gr.Puts(mglPoint(x0,y-2*d),"'\\#\\^'","rL");
gr.Mark(mglPoint(x1,-3*d,0),'V');	gr.Puts(mglPoint(x0,y-3*d),"'\\#v'","rL");
gr.Mark(mglPoint(x1,-4*d,0),'L');	gr.Puts(mglPoint(x0,y-4*d),"'\\#<'","rL");
gr.Mark(mglPoint(x1,-5*d,0),'R');	gr.Puts(mglPoint(x0,y-5*d),"'\\#>'","rL");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
TO BE DONE
@end verbatim
@c ------------------------------------------------------------------
@node Arrow styles sample, Text styles sample, Line styles sample, Basic features
@subsection Arrow styles sample
@cindex Line
@float
@image{../png/sampled, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
float a=0.1,b=0.4,c=0.5;
gr.Line(mglPoint(a,1),mglPoint(b,1),"k-A");		gr.Puts(mglPoint(c,1),"Style 'A' or 'A\\_'","rL");
gr.Line(mglPoint(a,0.8),mglPoint(b,0.8),"k-V");	gr.Puts(mglPoint(c,0.8),"Style 'V' or 'V\\_'","rL");
gr.Line(mglPoint(a,0.6),mglPoint(b,0.6),"k-K");	gr.Puts(mglPoint(c,0.6),"Style 'K' or 'K\\_'","rL");
gr.Line(mglPoint(a,0.4),mglPoint(b,0.4),"k-I");	gr.Puts(mglPoint(c,0.4),"Style 'I' or 'I\\_'","rL");
gr.Line(mglPoint(a,0.2),mglPoint(b,0.2),"k-D");	gr.Puts(mglPoint(c,0.2),"Style 'D' or 'D\\_'","rL");
gr.Line(mglPoint(a,0),mglPoint(b,0),"k-S");		gr.Puts(mglPoint(c,0),"Style 'S' or 'S\\_'","rL");
gr.Line(mglPoint(a,-0.2),mglPoint(b,-0.2),"k-O");	gr.Puts(mglPoint(c,-0.2),"Style 'O' or 'O\\_'","rL");
gr.Line(mglPoint(a,-0.4),mglPoint(b,-0.4),"k-T");	gr.Puts(mglPoint(c,-0.4),"Style 'T' or 'T\\_'","rL");
gr.Line(mglPoint(a,-0.6),mglPoint(b,-0.6),"k-_");	gr.Puts(mglPoint(c,-0.6),"Style '\\_' or none","rL");
gr.Line(mglPoint(a,-0.8),mglPoint(b,-0.8),"k-AS");	gr.Puts(mglPoint(c,-0.8),"Style 'AS'","rL");
gr.Line(mglPoint(a,-1),mglPoint(b,-1),"k-_A");		gr.Puts(mglPoint(c,-1),"Style '\\_A'","rL");

a=-1;	b=-0.7;	c=-0.6;
gr.Line(mglPoint(a,1),mglPoint(b,1),"kAA");		gr.Puts(mglPoint(c,1),"Style 'AA'","rL");
gr.Line(mglPoint(a,0.8),mglPoint(b,0.8),"kVV");	gr.Puts(mglPoint(c,0.8),"Style 'VV'","rL");
gr.Line(mglPoint(a,0.6),mglPoint(b,0.6),"kKK");	gr.Puts(mglPoint(c,0.6),"Style 'KK'","rL");
gr.Line(mglPoint(a,0.4),mglPoint(b,0.4),"kII");	gr.Puts(mglPoint(c,0.4),"Style 'II'","rL");
gr.Line(mglPoint(a,0.2),mglPoint(b,0.2),"kDD");	gr.Puts(mglPoint(c,0.2),"Style 'DD'","rL");
gr.Line(mglPoint(a,0),mglPoint(b,0),"kSS");		gr.Puts(mglPoint(c,0),"Style 'SS'","rL");
gr.Line(mglPoint(a,-0.2),mglPoint(b,-0.2),"kOO");	gr.Puts(mglPoint(c,-0.2),"Style 'OO'","rL");
gr.Line(mglPoint(a,-0.4),mglPoint(b,-0.4),"kTT");	gr.Puts(mglPoint(c,-0.4),"Style 'TT'","rL");
gr.Line(mglPoint(a,-0.6),mglPoint(b,-0.6),"k-__");	gr.Puts(mglPoint(c,-0.6),"Style '\\_\\_'","rL");
gr.Line(mglPoint(a,-0.8),mglPoint(b,-0.8),"k-VA");	gr.Puts(mglPoint(c,-0.8),"Style 'VA'","rL");
gr.Line(mglPoint(a,-1),mglPoint(b,-1),"k-AV");		gr.Puts(mglPoint(c,-1),"Style 'AV'","rL");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
TO BE DONE
@end verbatim
@c ------------------------------------------------------------------
@node Text styles sample, TeX parsing sample, Arrow styles sample, Basic features
@subsection Text styles sample
@cindex Puts
@float
@image{../png/sample4, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Putsw(mglPoint(0,1),L"Text can be in ASCII and in Unicode");
gr.Puts(mglPoint(0,0.6),"It can be \\wire{wire}, \\big{big} or #r{colored}");
gr.Puts(mglPoint(0,0.2),"One can change style in string: "
        "\\b{bold}, \\i{italic, \\b{both}}");
gr.Puts(mglPoint(0,-0.2),"Easy to \\a{overline} or "
        "\\u{underline}");
gr.Puts(mglPoint(0,-0.6),"Easy to change indexes ^{up} _{down} @{center}");
gr.Puts(mglPoint(0,-1),"It parse TeX: \\int \\alpha \\cdot "
        "\\sqrt3{sin(\\pi x)^2 + \\gamma_{i_k}} dx");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
text 0 1 'Text can be in ASCII and in Unicode'
text 0 0.6 'It can be \wire{wire}, \big{big} or #r{colored}'
text 0 0.2 'One can change style in string: \b{bold}, \i{italic, \b{both}}'
text 0 -0.2 'Easy to \a{overline} or \u{underline}'
text 0 -0.6 'Easy to change indexes ^{up} _{down} @{center}'
text 0 -1 'It parse TeX: \int \alpha \cdot \sqrt3{sin(\pi x)^2 + \gamma_{i_k}} dx'
@end verbatim
@c ------------------------------------------------------------------
@node TeX parsing sample, Font faces sample, Text styles sample, Basic features
@subsection TeX parsing sample
@cindex Puts
@float
@image{../png/samplee, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Puts(mglPoint(0), "\\sqrt{\\frac{\\alpha^{\\gamma^2}+"
        "\\overset 1{\\big\\infty}}{\\sqrt3{2+b}}}", 0, -4);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
text 0 0 '\sqrt{\frac{\alpha^{\gamma^2}+\overset 1{\big\infty}}{\sqrt3{2+b}}}' '' -4
@end verbatim
@c ------------------------------------------------------------------
@node Font faces sample, Colors sample, TeX parsing sample, Basic features
@subsection Font faces sample
@cindex Puts
@float
@image{../png/fonts, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
float h=1.1, d=0.25;
gr.LoadFont("STIX");		gr.Puts(mglPoint(0,h), "default font (STIX)");
gr.LoadFont("adventor");	gr.Puts(mglPoint(0,h-d), "adventor font");
gr.LoadFont("bonum");		gr.Puts(mglPoint(0,h-2*d), "bonum font");
gr.LoadFont("chorus");		gr.Puts(mglPoint(0,h-3*d), "chorus font");
gr.LoadFont("cursor");		gr.Puts(mglPoint(0,h-4*d), "cursor font");
gr.LoadFont("heros");		gr.Puts(mglPoint(0,h-5*d), "heros font");
gr.LoadFont("heroscn");	gr.Puts(mglPoint(0,h-6*d), "heroscn font");
gr.LoadFont("pagella");	gr.Puts(mglPoint(0,h-7*d), "pagella font");
gr.LoadFont("schola");		gr.Puts(mglPoint(0,h-8*d), "schola font");
gr.LoadFont("termes");		gr.Puts(mglPoint(0,h-9*d), "termes font");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
NOT AVAILABLE
@end verbatim
@c ------------------------------------------------------------------
@node Colors sample, Color schemes sample, Font faces sample, Basic features
@subsection Colors sample
@float
@image{../png/colors, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
//#LENUQ
gr.FaceZ(-1,	-1, 0, 0.4, 0.3, "L#");	gr.Puts(mglPoint(-0.8,-0.9), "L", "C:w", -1.4);
gr.FaceZ(-0.6,	-1, 0, 0.4, 0.3, "E#");	gr.Puts(mglPoint(-0.4,-0.9), "E", "C:w", -1.4);
gr.FaceZ(-0.2,	-1, 0, 0.4, 0.3, "N#");	gr.Puts(mglPoint(0,  -0.9), "N", "C:w", -1.4);
gr.FaceZ(0.2,	-1, 0, 0.4, 0.3, "U#");	gr.Puts(mglPoint(0.4,-0.9), "U", "C:w", -1.4);
gr.FaceZ(0.6,	-1, 0, 0.4, 0.3, "Q#");	gr.Puts(mglPoint(0.8,-0.9), "Q", "C:w", -1.4);
//#lenuq
gr.FaceZ(-1,	-0.7, 0, 0.4, 0.3, "l#");	gr.Puts(mglPoint(-0.8,-0.6), "l", "C:k", -1.4);
gr.FaceZ(-0.6,	-0.7, 0, 0.4, 0.3, "e#");	gr.Puts(mglPoint(-0.4,-0.6), "e", "C:k", -1.4);
gr.FaceZ(-0.2,	-0.7, 0, 0.4, 0.3, "n#");	gr.Puts(mglPoint(0,  -0.6), "n", "C:k", -1.4);
gr.FaceZ(0.2,	-0.7, 0, 0.4, 0.3, "u#");	gr.Puts(mglPoint(0.4,-0.6), "u", "C:k", -1.4);
gr.FaceZ(0.6,	-0.7, 0, 0.4, 0.3, "q#");	gr.Puts(mglPoint(0.8,-0.6), "q", "C:k", -1.4);
//#CMYkP
gr.FaceZ(-1,	-0.4, 0, 0.4, 0.3, "C#");	gr.Puts(mglPoint(-0.8,-0.3), "C", "C:w", -1.4);
gr.FaceZ(-0.6,	-0.4, 0, 0.4, 0.3, "M#");	gr.Puts(mglPoint(-0.4,-0.3), "M", "C:w", -1.4);
gr.FaceZ(-0.2,	-0.4, 0, 0.4, 0.3, "Y#");	gr.Puts(mglPoint(0,  -0.3), "Y", "C:w", -1.4);
gr.FaceZ(0.2,	-0.4, 0, 0.4, 0.3, "k#");	gr.Puts(mglPoint(0.4,-0.3), "k", "C:w", -1.4);
gr.FaceZ(0.6,	-0.4, 0, 0.4, 0.3, "P#");	gr.Puts(mglPoint(0.8,-0.3), "P", "C:w", -1.4);
//#cmywp
gr.FaceZ(-1,	-0.1, 0, 0.4, 0.3, "c#");	gr.Puts(mglPoint(-0.8, 0), "c", "C:k", -1.4);
gr.FaceZ(-0.6,	-0.1, 0, 0.4, 0.3, "m#");	gr.Puts(mglPoint(-0.4, 0), "m", "C:k", -1.4);
gr.FaceZ(-0.2,	-0.1, 0, 0.4, 0.3, "y#");	gr.Puts(mglPoint(0,   0), "y", "C:k", -1.4);
gr.FaceZ(0.2,	-0.1, 0, 0.4, 0.3, "w#");	gr.Puts(mglPoint(0.4, 0), "w", "C:k", -1.4);
gr.FaceZ(0.6,	-0.1, 0, 0.4, 0.3, "p#");	gr.Puts(mglPoint(0.8, 0), "p", "C:k", -1.4);
//#BGRHW
gr.FaceZ(-1,	0.2, 0, 0.4, 0.3, "B#");	gr.Puts(mglPoint(-0.8, 0.3), "B", "C:w", -1.4);
gr.FaceZ(-0.6,	0.2, 0, 0.4, 0.3, "G#");	gr.Puts(mglPoint(-0.4, 0.3), "G", "C:w", -1.4);
gr.FaceZ(-0.2,	0.2, 0, 0.4, 0.3, "R#");	gr.Puts(mglPoint(0,   0.3), "R", "C:w", -1.4);
gr.FaceZ(0.2,	0.2, 0, 0.4, 0.3, "H#");	gr.Puts(mglPoint(0.4, 0.3), "H", "C:w", -1.4);
gr.FaceZ(0.6,	0.2, 0, 0.4, 0.3, "W#");	gr.Puts(mglPoint(0.8, 0.3), "W", "C:w", -1.4);
//#bgrhw
gr.FaceZ(-1,	0.2, 0, 0.4, 0.3, "b#");	gr.Puts(mglPoint(-0.8, 0.6), "b", "C:k", -1.4);
gr.FaceZ(-0.6,	0.5, 0, 0.4, 0.3, "g#");	gr.Puts(mglPoint(-0.4, 0.6), "g", "C:k", -1.4);
gr.FaceZ(-0.2,	0.2, 0, 0.4, 0.3, "r#");	gr.Puts(mglPoint(0,   0.6), "r", "C:k", -1.4);
gr.FaceZ(0.2,	0.2, 0, 0.4, 0.3, "h#");	gr.Puts(mglPoint(0.4, 0.6), "h", "C:k", -1.4);
gr.FaceZ(0.6,	0.2, 0, 0.4, 0.3, "w#");	gr.Puts(mglPoint(0.8, 0.6), "w", "C:k", -1.4);
//#brighted
gr.FaceZ(-1,	0.8, 0, 0.4, 0.3, "r1#");	gr.Puts(mglPoint(-0.8, 0.9), "r1", "C:w", -1.4);
gr.FaceZ(-0.6,	0.8, 0, 0.4, 0.3, "r3#");	gr.Puts(mglPoint(-0.4, 0.9), "r3", "C:w", -1.4);
gr.FaceZ(-0.2,	0.8, 0, 0.4, 0.3, "r5#");	gr.Puts(mglPoint(0,   0.9), "r5", "C:k", -1.4);
gr.FaceZ(0.2,	0.8, 0, 0.4, 0.3, "r7#");	gr.Puts(mglPoint(0.4, 0.9), "r7", "C:k", -1.4);
gr.FaceZ(0.6,	0.8, 0, 0.4, 0.3, "r9#");	gr.Puts(mglPoint(0.8, 0.9), "r9", "C:k", -1.4);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
#LENUQ
facez -1   -1 0 0.4 0.3 'L#': text -0.8 -0.9 'L' 'C:w'
facez -0.6 -1 0 0.4 0.3 'E#': text -0.4 -0.9 'E' 'C:w'
facez -0.2 -1 0 0.4 0.3 'N#': text  0   -0.9 'N' 'C:w'
facez  0.2 -1 0 0.4 0.3 'U#': text  0.4 -0.9 'U' 'C:w'
facez  0.6 -1 0 0.4 0.3 'Q#': text  0.8 -0.9 'Q' 'C:w'
#lenuq
facez -1   -0.7 0 0.4 0.3 'l#': text -0.8 -0.6 'l' 'C:k'
facez -0.6 -0.7 0 0.4 0.3 'e#': text -0.4 -0.6 'e' 'C:k'
facez -0.2 -0.7 0 0.4 0.3 'n#': text  0   -0.6 'n' 'C:k'
facez  0.2 -0.7 0 0.4 0.3 'u#': text  0.4 -0.6 'u' 'C:k'
facez  0.6 -0.7 0 0.4 0.3 'q#': text  0.8 -0.6 'q' 'C:k'
#CMYkP
facez -1   -0.4 0 0.4 0.3 'C#': text -0.8 -0.3 'C' 'C:w'
facez -0.6 -0.4 0 0.4 0.3 'M#': text -0.4 -0.3 'M' 'C:w'
facez -0.2 -0.4 0 0.4 0.3 'Y#': text  0   -0.3 'Y' 'C:w'
facez  0.2 -0.4 0 0.4 0.3 'k#': text  0.4 -0.3 'k' 'C:w'
facez  0.6 -0.4 0 0.4 0.3 'P#': text  0.8 -0.3 'P' 'C:w'
#lenuq
facez -1   -0.1 0 0.4 0.3 'c#': text -0.8 0 'c' 'C:k'
facez -0.6 -0.1 0 0.4 0.3 'm#': text -0.4 0 'm' 'C:k'
facez -0.2 -0.1 0 0.4 0.3 'y#': text  0   0 'y' 'C:k'
facez  0.2 -0.1 0 0.4 0.3 'w#': text  0.4 0 'w' 'C:k'
facez  0.6 -0.1 0 0.4 0.3 'p#': text  0.8 0 'p' 'C:k'
#BGRHW
facez -1   0.2 0 0.4 0.3 'B#': text -0.8 0.3 'B' 'C:k'
facez -0.6 0.2 0 0.4 0.3 'G#': text -0.4 0.3 'G' 'C:k'
facez -0.2 0.2 0 0.4 0.3 'R#': text  0   0.3 'R' 'C:k'
facez  0.2 0.2 0 0.4 0.3 'H#': text  0.4 0.3 'H' 'C:k'
facez  0.6 0.2 0 0.4 0.3 'W#': text  0.8 0.3 'W' 'C:k'
#bgrhw
facez -1   0.5 0 0.4 0.3 'b#': text -0.8 0.6 'b' 'C:w'
facez -0.6 0.5 0 0.4 0.3 'g#': text -0.4 0.6 'g' 'C:w'
facez -0.2 0.5 0 0.4 0.3 'r#': text  0   0.6 'r' 'C:w'
facez  0.2 0.5 0 0.4 0.3 'h#': text  0.4 0.6 'h' 'C:w'
facez  0.6 0.5 0 0.4 0.3 'w#': text  0.8 0.6 'w' 'C:w'
#brighted
facez -1   0.8 0 0.4 0.3 'r1#': text -0.8 0.9 'r1' 'C:k'
facez -0.6 0.8 0 0.4 0.3 'r3#': text -0.4 0.9 'r3' 'C:k'
facez -0.2 0.8 0 0.4 0.3 'r5#': text  0   0.9 'r5' 'C:k'
facez  0.2 0.8 0 0.4 0.3 'r7#': text  0.4 0.9 'r7' 'C:k'
facez  0.6 0.8 0 0.4 0.3 'r9#': text  0.8 0.9 'r9' 'C:k'
@end verbatim
@c ------------------------------------------------------------------
@node Color schemes sample, Normal transparency, Colors sample, Basic features
@subsection Color schemes sample
@cindex Colorbar
@float
@image{../png/color_schemes, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(256,2);	a.Fill(-1,1);
gr.SubPlot(2,10,0,0.2);	gr.Dens(a,"kw", nan);
gr.Puts(mglPoint(-1.4, -0.3), "kw", "C", -8);
gr.SubPlot(2,10,1,0.2);	gr.Dens(a,"wk", nan);
gr.Puts(mglPoint(-1.4, -0.3), "wk", "C", -8);
gr.SubPlot(2,10,2,0.2);	gr.Dens(a,"kHCcw", nan);
gr.Puts(mglPoint(-1.4, -0.3), "kHCcw", "C", -8);
gr.SubPlot(2,10,3,0.2);	gr.Dens(a,"kBbcw", nan);
gr.Puts(mglPoint(-1.4, -0.3), "kBbcw", "C", -8);
gr.SubPlot(2,10,4,0.2);	gr.Dens(a,"kRryw", nan);
gr.Puts(mglPoint(-1.4, -0.3), "kRryw", "C", -8);
gr.SubPlot(2,10,5,0.2);	gr.Dens(a,"kGgew", nan);
gr.Puts(mglPoint(-1.4, -0.3), "kGgew", "C", -8);
gr.SubPlot(2,10,6,0.2);	gr.Dens(a,"BbwrR", nan);
gr.Puts(mglPoint(-1.4, -0.3), "BbwrR", "C", -8);
gr.SubPlot(2,10,7,0.2);	gr.Dens(a,"BbwgG", nan);
gr.Puts(mglPoint(-1.4, -0.3), "BbwgG", "C", -8);
gr.SubPlot(2,10,8,0.2);	gr.Dens(a,"GgwmM", nan);
gr.Puts(mglPoint(-1.4, -0.3), "GgwmM", "C", -8);
gr.SubPlot(2,10,9,0.2);	gr.Dens(a,"UuwqR", nan);
gr.Puts(mglPoint(-1.4, -0.3), "UuwqR", "C", -8);
gr.SubPlot(2,10,10,0.2);	gr.Dens(a,"QqwcC", nan);
gr.Puts(mglPoint(-1.4, -0.3), "QqwcC", "C", -8);
gr.SubPlot(2,10,11,0.2);	gr.Dens(a,"CcwyY", nan);
gr.Puts(mglPoint(-1.4, -0.3), "CcwyY", "C", -8);
gr.SubPlot(2,10,12,0.2);	gr.Dens(a,"bcwyr", nan);
gr.Puts(mglPoint(-1.4, -0.3), "bcwyr", "C", -8);
gr.SubPlot(2,10,13,0.2);	gr.Dens(a,"bwr", nan);
gr.Puts(mglPoint(-1.4, -0.3), "bwr", "C", -8);
gr.SubPlot(2,10,14,0.2);	gr.Dens(a,"BbcyrR", nan);
gr.Puts(mglPoint(-1.4, -0.3), "BbcyrR", "C", -8);
gr.SubPlot(2,10,15,0.2);	gr.Dens(a,"UbcyqR", nan);
gr.Puts(mglPoint(-1.4, -0.3), "UbcyqR", "C", -8);
gr.SubPlot(2,10,16,0.2);	gr.Dens(a,"BbcwyrR", nan);
gr.Puts(mglPoint(-1.4, -0.3), "BbcwyrR", "C", -8);
gr.SubPlot(2,10,17,0.2);	gr.Dens(a,"bcyr", nan);
gr.Puts(mglPoint(-1.4, -0.3), "bcyr", "C", -8);
gr.SubPlot(2,10,18,0.2);	gr.Dens(a,"BbcyrR|", nan);
gr.Puts(mglPoint(-1.4, -0.3), "BbcyrR|", "C", -8);
gr.SubPlot(2,10,19,0.2);	gr.Dens(a,"bgr", nan);
gr.Puts(mglPoint(-1.4, -0.3), "bgr", "C", -8);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 256 2: fill a 'x'
subplot 2 10 0 0.2:dens a 'kw'
text -1.4 -0.3 'kw' '' -8
subplot 2 10 1 0.2:dens a 'wk'
text -1.4 -0.3 'wk' '' -8
subplot 2 10 2 0.2:dens a 'kHCcw'
text -1.4 -0.3 'kHCcw' '' -8
subplot 2 10 3 0.2:dens a 'kBbcw'
text -1.4 -0.3 'kBbcw' '' -8
subplot 2 10 4 0.2:dens a 'kRryw'
text -1.4 -0.3 'kRryw' '' -8
subplot 2 10 5 0.2:dens a 'kGgew'
text -1.4 -0.3 'kGgew' '' -8
subplot 2 10 6 0.2:dens a 'BbwrR'
text -1.4 -0.3 'BbwrR' '' -8
subplot 2 10 7 0.2:dens a 'BbwgG'
text -1.4 -0.3 'BbwgG' '' -8
subplot 2 10 8 0.2:dens a 'GgwmM'
text -1.4 -0.3 'GgwmM' '' -8
subplot 2 10 9 0.2:dens a 'UuwqR'
text -1.4 -0.3 'UuwqR' '' -8
subplot 2 10 10 0.2:dens a 'QqwcC'
text -1.4 -0.3 'QqwcC' '' -8
subplot 2 10 11 0.2:dens a 'CcwyY'
text -1.4 -0.3 'CcwyY' '' -8
subplot 2 10 12 0.2:dens a 'bcwyr'
text -1.4 -0.3 'bcwyr' '' -8
subplot 2 10 13 0.2:dens a 'bwr'
text -1.4 -0.3 'bwr' '' -8
subplot 2 10 14 0.2:dens a 'BbcyrR'
text -1.4 -0.3 'BbcyrR' '' -8
subplot 2 10 15 0.2:dens a 'UbcyqR'
text -1.4 -0.3 'UbcyqR' '' -8
subplot 2 10 16 0.2:dens a 'BbcwyrR'
text -1.4 -0.3 'BbcwyrR' '' -8
subplot 2 10 17 0.2:dens a 'bcyr'
text -1.4 -0.3 'bcyr' '' -8
subplot 2 10 18 0.2:dens a 'BbcyrR|'
text -1.4 -0.3 'BbcyrR|' '' -8
subplot 2 10 19 0.2:dens a 'bgr'
text -1.4 -0.3 'bgr' '' -8
@end verbatim
@c ------------------------------------------------------------------
@node Normal transparency, Glass-like transparency, Color schemes sample, Basic features
@subsection Normal transparency
@cindex TranspType
@float
@image{../png/type0, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Alpha(true);	gr.Light(true);
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");

gr.TranspType = 0;	gr.Clf();
gr.SubPlot(2,2,0);	gr.Rotate(40,60);	gr.Surf(a);	gr.Box();
gr.SubPlot(2,2,1);	gr.Rotate(40,60);	gr.Dens(a);	gr.Box();
gr.SubPlot(2,2,2);	gr.Rotate(40,60);	gr.Cont(a);	gr.Box();
gr.SubPlot(2,2,3);	gr.Rotate(40,60);	gr.Axial(a);	gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
alpha on: light on
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'

transptype 0: clf
subplot 2 2 0: rotate 40 60: surf a:  box
subplot 2 2 1: rotate 40 60: dens a:  box
subplot 2 2 2: rotate 40 60: cont a:  box
subplot 2 2 3: rotate 40 60: axial a: box
@end verbatim
@c ------------------------------------------------------------------
@node Glass-like transparency, Lamp-like transparency, Normal transparency, Basic features
@subsection Glass-like transparency
@cindex TranspType
@float
@image{../png/type1, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Alpha(true);	gr.Light(true);
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");

gr.TranspType = 1;	gr.Clf();
gr.SubPlot(2,2,0);	gr.Rotate(40,60);	gr.Surf(a);	gr.Box();
gr.SubPlot(2,2,1);	gr.Rotate(40,60);	gr.Dens(a);	gr.Box();
gr.SubPlot(2,2,2);	gr.Rotate(40,60);	gr.Cont(a);	gr.Box();
gr.SubPlot(2,2,3);	gr.Rotate(40,60);	gr.Axial(a);	gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
alpha on: light on
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'

transptype 1: clf
subplot 2 2 0: rotate 40 60: surf a:  box
subplot 2 2 1: rotate 40 60: dens a:  box
subplot 2 2 2: rotate 40 60: cont a:  box
subplot 2 2 3: rotate 40 60: axial a: box
@end verbatim
@c ------------------------------------------------------------------
@node Lamp-like transparency, , Glass-like transparency, Basic features
@subsection Lamp-like transparency
@cindex TranspType
@float
@image{../png/type2, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Alpha(true);	gr.Light(true);
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");

gr.TranspType = 2;	gr.Clf();
gr.SubPlot(2,2,0);	gr.Rotate(40,60);	gr.Surf(a);	gr.Box();
gr.SubPlot(2,2,1);	gr.Rotate(40,60);	gr.Dens(a);	gr.Box();
gr.SubPlot(2,2,2);	gr.Rotate(40,60);	gr.Cont(a);	gr.Box();
gr.SubPlot(2,2,3);	gr.Rotate(40,60);	gr.Axial(a);	gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
alpha on: light on
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'

transptype 2: clf
subplot 2 2 0: rotate 40 60: surf a:  box
subplot 2 2 1: rotate 40 60: dens a:  box
subplot 2 2 2: rotate 40 60: cont a:  box
subplot 2 2 3: rotate 40 60: axial a: box
@end verbatim



@node Additional features, Advanced features, Dual plotting samples, Samples
@section Additional features
@menu
* Legend sample::               
* Adding mesh sample::          
* Surf & Cont sample::          
* Flow & Dens sample::          
* Several light sample::        
* Mirrored surface sample::     
* Cont with labels sample::     
* Ternary plot sample::         
* Quaternary plot sample::         
* Drops sample::                
* Molecules drawing sample::    
@end menu
@c ------------------------------------------------------------------
@node Legend sample, Adding mesh sample, , Additional features
@subsection Legend sample
@cindex Plot
@cindex Legend
@cindex AddLegend
@float
@image{../png/legend, 7cm}
@c @caption{Example of Legend usage. @tdref{legend}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData f(50,3);
f.Modify("sin(2*pi*x*x)",0);
f.Modify("sin(2*pi*x)",1);
f.Modify("sin(2*pi*sqrt(x))",2);
gr.Axis(mglPoint(0,-1),mglPoint(1,1));
gr.Box(); gr.Plot(f); gr.Axis();
gr.AddLegend("sin(\\pi {x^2})","b");
gr.AddLegend("sin(\\pi x)","g*");
gr.AddLegend("sin(\\pi \\sqrt{\\a x})","r+");
gr.Legend();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new f 50 3
modify f 'sin(2*pi*x*x)'
modify f 'sin(2*pi*x)' 1
modify f 'sin(2*pi*sqrt(x))' 2
axis 0 -1 1 1
box
plot f
axis
addlegend 'sin(\pi {x^2})' 'b'
addlegend 'sin(\pi x)' 'g*'
addlegend 'sin(\pi \sqrt{\a x})' 'r+'
legend
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT f = mgl_create_data_size(50,3,1);
mgl_data_modify(f,"sin(2*pi*x*x)",0);
mgl_data_modify(f,"sin(2*pi*x)",1);
mgl_data_modify(f,"sin(2*pi*sqrt(x))",2);
mgl_set_axis(gr, 0.,-1.,0., 1.,1.,1., 0.,0.,0.);
mgl_box(gr,1);
mgl_plot(gr,f,"");
mgl_axis(gr,"xy");
mgl_add_legend(gr,"sin(\\pi {x^2})","b");
mgl_add_legend(gr,"sin(\\pi x)","g*");
mgl_add_legend(gr,"sin(\\pi \\sqrt{\\a x})","r+");
mgl_legend(gr,3,"rL",-1.,0.1);
mgl_delete_data(f);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Adding mesh sample, Surf & Cont sample, Legend sample, Additional features
@subsection Adding mesh sample
@cindex SubPlot
@cindex Surf
@cindex Dens
@cindex Cont
@cindex Axial
@float
@image{../png/samplea, 7cm}
@c @caption{Example of adding mesh. @tdref{samplea}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Light(true);
gr.Alpha(true);
gr.SubPlot(2,2,0); gr.Rotate(40,60);
gr.Surf(a,"BbcyrR#");  gr.Box();
gr.SubPlot(2,2,1); gr.Rotate(40,60);
gr.Dens(a,"BbcyrR#");  gr.Box();
gr.SubPlot(2,2,2); gr.Rotate(40,60);
gr.Cont(a,"BbcyrR#");  gr.Box();
gr.SubPlot(2,2,3); gr.Rotate(40,60);
gr.Axial(a,"BbcyrR#"); gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
alpha on
light on
subplot 2 2 0
rotate 40 60
surf a 'BbcyrR#'
box
subplot 2 2 1
rotate 40 60
dens a 'BbcyrR#'
box
subplot 2 2 2
rotate 40 60
cont a 'BbcyrR#'
box
subplot 2 2 3
rotate 40 60
axial a 'BbcyrR#'
box
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_set_alpha(gr,1);
mgl_set_light(gr,1);
mgl_subplot(gr,2,2,0); mgl_rotate(gr,40.,60.,0.);
mgl_surf(gr,a,"BbcyrR#");       mgl_box(gr,1);
mgl_subplot(gr,2,2,1); mgl_rotate(gr,40.,60.,0.);
mgl_dens(gr,a,"BbcyrR#",-1.);   mgl_box(gr,1);
mgl_subplot(gr,2,2,2); mgl_rotate(gr,40.,60.,0.);
mgl_cont(gr,a,"BbcyrR#",7,NAN); mgl_box(gr,1);
mgl_subplot(gr,2,2,3); mgl_rotate(gr,40.,60.,0.);
mgl_axial(gr,a,"BbcyrR#",3);    mgl_box(gr,1);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Surf & Cont sample, Flow & Dens sample, Adding mesh sample, Additional features
@subsection Surf & Cont sample
@cindex Surf
@cindex Cont
@float
@image{../png/surf_cont_y, 7cm}
@c @caption{Example of Surf & Cont. @tdref{surf_cont_y}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Surf(a);
gr.Cont(a,"y");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
box
surf a
cont a 'y'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_surf(gr,a,0);
mgl_cont(gr,a,"y",7,NAN);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Flow & Dens sample, Several light sample, Surf & Cont sample, Additional features
@subsection Flow & Dens sample
@cindex Flow
@cindex Dens
@float
@image{../png/flow_dens, 7cm}
@c @caption{Example of Flow & Dens. @tdref{flow_dens}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40), b(50,40), d(a);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
b.Modify("0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))");
d.Modify("sqrt(v^2+w^2)",a,b);
gr.Box();
gr.Flow(a,b,"br"); gr.Dens(d,"BbcyrR");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
new b 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
modify b '0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))'
copy d a
modify d 'sqrt(v^2+w^2)' a b
box
flow a b 'br'
dens d 'BbcyrR'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a, b, d;
a = mgl_create_data_size(50,40,1);
b = mgl_create_data_size(50,40,1);
d = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(b,"0.6*cos(2*pi*x)*cos(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_data_modify(d,"sqrt(v^2+w^2)",a,b);
mgl_box(gr,1);
mgl_flow_2d(gr,a,b,"br",5,1,0.);
mgl_dens(gr,d,"BbcyrR",-1.);
mgl_delete_data(a); mgl_delete_data(b); mgl_delete_data(d);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Several light sample, Mirrored surface sample, Flow & Dens sample, Additional features
@subsection Several light sample
@cindex Surf
@cindex Light
@float
@image{../png/several_light, 7cm}
@c @caption{Example of Surf with several light. @tdref{several_light}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Rotate(40,60);
gr.Light(true);
gr.Light(1,mglPoint(0,1,0),'c');
gr.Light(2,mglPoint(1,0,0),'y');
gr.Light(3,mglPoint(0,-1,0),'m');
gr.Box();
gr.Surf(a,"h");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
rotate 40 60
light on
light 1 0 1 0 'c'
light 2 1 0 0 'y'
light 3 0 -1 0 'm'
box
surf a 'h'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_add_light_rgb(gr,1,0.,1.,0.,1, 0.,1.,1.,0.5);
mgl_add_light_rgb(gr,2,1.,0.,0.,1, 1.,1.,0.,0.5);
mgl_add_light_rgb(gr,3,0.,-1.,0.,1, 1.,0.,1.,0.5);
mgl_box(gr,1);
mgl_surf(gr,a,"h");
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Mirrored surface sample, Cont with labels sample, Several light sample, Additional features
@subsection Mirrored surface sample
@cindex Surf
@float
@image{../png/mirror, 7cm}
@c @caption{Example of mirrored surface. @tdref{mirror}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(30,40),x(30),y1(40),y2(40);
a.Modify("pi*(1-2*x)*exp(-4*y^2-4*(2*x-1)^2)");
x.Fill(-1,1); y1.Fill(0,1); y2.Fill(0,-1);
gr.Rotate(40,60);
gr.Light(true);
gr.Box();
gr.Surf(x,y1,a,"r"); gr.Surf(x,y2,a,"b");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 30 40
modify a 'pi*(1-2*x)*exp(-4*y^2-4*(2*x-1)^2)'
rotate 40 60
light on
surf a 'r'; yrange 0 1
surf a 'b'; yrange 0 -1
box
@end verbatim
or
@verbatim
new a 30 40
var x 30 -1 1
var y1 40 0 1
var y2 40 0 -1
modify a 'pi*(1-2*x)*exp(-4*y^2-4*(2*x-1)^2)'
rotate 40 60
light on
surf x y1 a 'r'
surf x y2 a 'b'
box
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a,x,y1,y2;
a = mgl_create_data_size(30,40,1);
x = mgl_create_data_size(30,1,1);
y1 = mgl_create_data_size(40,1,1);
y2 = mgl_create_data_size(40,1,1);
mgl_data_modify(a,"pi*(1-2*x)*exp(-4*y^2-4*(2*x-1)^2)",0);
mgl_data_fill(x,-1.,1.,'x');
mgl_data_fill(y1,0.,1.,'x');
mgl_data_fill(y2,0.,-1.,'x');
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_box(gr,1);
mgl_surf_xy(gr,x,y1,a,"r"); mgl_surf_xy(gr,x,y2,a,"b");
mgl_delete_data(a); mgl_delete_data(y1);
mgl_delete_data(x); mgl_delete_data(y2);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Cont with labels sample, Ternary plot sample, Mirrored surface sample, Additional features
@subsection Cont with labels sample
@cindex Cont
@float
@image{../png/contt, 7cm}
@c @caption{Example of Cont with labels. @tdref{contt}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Box();
gr.Cont(a,"BbcyrRt");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
box
cont a 'BbcyrRt'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_box(gr,1);
mgl_cont(gr,a,"BbcyrRt",7,0);
mgl_delete_data(a);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Ternary plot sample, Quaternary plot sample, Cont with labels sample, Additional features
@subsection Ternary plot sample
@cindex Ternary
@float
@image{../png/ternary, 7cm}
@c @caption{Example of Ternary plot. @tdref{ternary}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData x(50),y(50),rx(10),ry(10), a(20,30);
a.Modify("4*x*y");
x.Modify("0.25*(1+cos(2*pi*x))");
y.Modify("0.25*(1+sin(2*pi*x))");
rx.Modify("rnd"); ry.Modify("(1-v)*rnd",rx);
gr.Text(mglPoint(-0.8,1.3), "Ternary plot (x+y+t=1)");
gr.Ternary(1);
gr.Plot(x,y,"r2");
gr.Plot(rx,ry,"q^ ");
gr.Cont(a);
gr.Line(mglPoint(0.5,0), mglPoint(0,0.75), "g2");
gr.Axis(); gr.Grid("xyz","B;");
gr.Label('x',"x comp.");
gr.Label('y',"y comp.");
gr.Label('t',"t comp.");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new rx 10
new ry 10
new x 50
new y 50
new a 20 30
modify a '4*x*y'
modify x '0.25*(1+cos(2*pi*x))'
modify y '0.25*(1+sin(2*pi*x))'
modify rx 'rnd'
modify ry 'rnd*(1-v)' rx
text -0.8 1.3 'Ternary plot (x+y+t=1)'
ternary 1
plot x y 'r2'
plot rx ry 'q^ '
cont a
line 0.5 0 0 0.75 'g2'
axis
grid 'xyz' 'B;'
xlabel 'x comp.'
ylabel 'y comp.'
tlabel 't comp.'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT x,y,rx,ry,a;
x = mgl_create_data_size(50,1,1);
y = mgl_create_data_size(50,1,1);
rx = mgl_create_data_size(50,1,1);
ry = mgl_create_data_size(50,1,1);
a = mgl_create_data_size(20,30,1);
mgl_data_modify(x,"0.25*(1+cos(2*pi*x))",0);
mgl_data_modify(y,"0.25*(1+sin(2*pi*x))",0);
mgl_data_modify(rx,"rnd",0);
mgl_data_modify_vw(ry,"(1-v)*rnd",rx,0);
mgl_data_modify(a,"4*x*y",0);
mgl_puts_ext(gr,-0.8,1.3,0.,"Ternary plot (x+y+t=1)","C",-1.4,'t');
mgl_set_ternary(gr,1);
mgl_plot_xy(gr,x,y,"r2");
mgl_plot_xy(gr,rx,ry,"q^ ");
mgl_cont(gr,a,"",7,0.);
mgl_line(gr,0.5,0.,0.,0.,0.75,0.,"g2",2);
mgl_axis(gr,"xyz");
mgl_axis_grid(gr,"xyz","B:");
mgl_label(gr,'x',"x comp");
mgl_label(gr,'y',"y comp");
mgl_label(gr,'t',"t comp");
mgl_delete_data(a);
mgl_delete_data(x);     mgl_delete_data(y);
mgl_delete_data(rx);    mgl_delete_data(ry);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------


@node Quaternary plot sample, Drops sample, Ternary plot sample, Additional features
@subsection Quaternary plot sample
@cindex Ternary
@float
@image{../png/quaternary, 7cm}
@c @caption{Example of Ternary plot. @tdref{ternary}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData x(50),y(50),z(50),rx(10),ry(10), a(20,30);
a.Modify("x*y*(1-x-y)^2*30");
x.Modify("0.25*(1-x)*(1+cos(2*pi*x))");
y.Modify("0.25*(1-x)*(1+sin(2*pi*x))");
z.Modify("x");

gr.Text(mglPoint(0,1.3), "Quaternary plot (x+y+z+t=1)");
gr.Rotate(60,70);      gr.Light(true);
gr.Ternary(2);         gr.SetCut(true);
gr.Plot(x,y,z,"r2");	gr.Surf(a,"#");
gr.Axis(); gr.Grid();	gr.Box();
gr.SetRotatedText(false);
gr.Label('t',"A",1);	gr.Label('x',"B",1);
gr.Label('y',"C",1);	gr.Label('z',"D",1);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new x 50:new y 50:new z 50:new a 20 30
modify a 'x*y*(1-x-y)^2*30'
modify x '0.25*(1-x)*(1+cos(2*pi*x))'
modify y '0.25*(1-x)*(1+sin(2*pi*x))'

text 0 1.3 'Quaternary plot (x+y+z+t=1)'
rotate 60 70:light on
ternary 2:cut on
plot x y z 'r2':surf a '#'
axis:box:grid
rotatetext off
tlabel 'A' 1:xlabel 'B' 1
ylabel 'C' 1:zlabel 'D' 1
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
TO BE DONE
@end verbatim
@end ifclear

@c ------------------------------------------------------------------
@node Drops sample, Molecules drawing sample, Quaternary plot sample, Additional features
@subsection Drops sample
@cindex Drop
@float
@image{../png/drops, 7cm}
@c @caption{Example of Drop(s). @tdref{drops}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Light(true);
gr.Puts(mglPoint(-1,1.2),"sh=0");
gr.Drop(mglPoint(-1,0),mglPoint(0,1),0.5,"r",0);
gr.Puts(mglPoint(-0.33,1.2),"sh=0.33");
gr.Drop(mglPoint(-0.33,0),mglPoint(0,1),0.5,"r",0.33);
gr.Puts(mglPoint(0.33,1.2),"sh=0.67");
gr.Drop(mglPoint(0.33,0),mglPoint(0,1),0.5,"r",0.67);
gr.Puts(mglPoint(1,1.2),"sh=1");
gr.Drop(mglPoint(1,0),mglPoint(0,1),0.5,"r",1);
gr.Ball(mglPoint(-1,0,1),'k');
gr.Ball(mglPoint(-0.33,0,1),'k');
gr.Ball(mglPoint(0.33,0,1),'k');
gr.Ball(mglPoint(1,0,1),'k');
gr.Line(mglPoint(-1,0,1),mglPoint(1,0,1),"b");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
light on
text -1 1.2 'sh=0'
drop -1 0 0 1 0.5 'r' 0
text -0.33 1.2 'sh=0.33'
drop -0.33 0 0 1 0.5 'r' 0.33
text 0.33 1.2 'sh=0.67'
drop 0.33 0 0 1 0.5 'r' 0.67
text 1 1.2 'sh=1'
drop 1 0 0 1 0.5 'r' 1
ball -1 0 1 'k'
ball -0.33 0 1 'k'
ball 0.33 0 1 'k'
ball 1 0 1 'k'
line -1 0 1 1 0 1 'b'
new h 100
modify h '0.25*(1+x)^2'
plot h 'k|'
text -1 0.6 'h\sim(1+sh)^2' 'rL'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
mgl_set_light(gr,1);
mgl_puts(gr,-1.,1.2,0.,"sh=0"); 
mgl_drop(gr,-1.,0.,0.,0.,1.,0.,0.5,"r",0.,1.);
mgl_puts(gr,-0.33,1.2,0.,"sh=0.33"); 
mgl_drop(gr,-0.33,0.,0.,0.,1.,0.,0.5,"r",0.33,1.);
mgl_puts(gr,0.33,1.2,0.,"sh=0.67"); 
mgl_drop(gr,0.33,0.,0.,0.,1.,0.,0.5,"r",0.67,1.);
mgl_puts(gr,1.,1.2,0.,"sh=1"); 
mgl_drop(gr,1.,0.,0.,0.,1.,0.,0.5,"r",1.,1.);
mgl_ball_str(gr,-1.,0.,1.,"k");
mgl_ball_str(gr,-0.33,0.,1.,"k");
mgl_ball_str(gr,0.33,0.,1.,"k");
mgl_ball_str(gr,1.,0.,1.,"k");
mgl_line(gr,-1.,0.,1.,1.,0.,1.,"b",2);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Molecules drawing sample, , Drops sample, Additional features
@subsection Molecules drawing sample
@cindex Drop
@cindex Sphere
@float
@image{../png/molecule, 7cm}
@c @caption{Example of molecules drawing. @tdref{molecule}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Alpha(true); gr.Light(true);
gr.SubPlot(2,2,0);
gr.Text(mglPoint(0,1.2),"Methane, CH_4",0,-3); gr.Rotate(60,120);
gr.Sphere(mglPoint(0,0,0),0.25,"k");
gr.Drop(mglPoint(0,0,0),mglPoint(0,0,1),0.35,"h",1,2);
gr.Sphere(mglPoint(0,0,0.7),0.25,"g");
gr.Drop(mglPoint(0,0,0),mglPoint(-0.94,0,-0.33),0.35,"h",1,2);
gr.Sphere(mglPoint(-0.66,0,-0.23),0.25,"g");
gr.Drop(mglPoint(0,0,0),mglPoint(0.47,0.82,-0.33),0.35,"h",1,2);
gr.Sphere(mglPoint(0.33,0.57,-0.23),0.25,"g");
gr.Drop(mglPoint(0,0,0),mglPoint(0.47,-0.82,-0.33),0.35,"h",1,2);
gr.Sphere(mglPoint(0.33,-0.57,-0.23),0.25,"g");
gr.SubPlot(2,2,1);
gr.Text(mglPoint(0,1.2),"Water, H{_2}O",0,-3); gr.Rotate(60,100);
gr.Sphere(mglPoint(0,0,0),0.25,"r");
gr.Drop(mglPoint(0,0,0),mglPoint(0.3,0.5,0),0.3,"m",1,2);
gr.Sphere(mglPoint(0.3,0.5,0),0.25,"g");
gr.Drop(mglPoint(0,0,0),mglPoint(0.3,-0.5,0),0.3,"m",1,2);
gr.Sphere(mglPoint(0.3,-0.5,0),0.25,"g");
gr.SubPlot(2,2,2);
gr.Text(mglPoint(0,1.2),"Oxygen, O_2",0,-3); gr.Rotate(60,120);
gr.Drop(mglPoint(0,0.5,0),mglPoint(0,-0.3,0),0.3,"m",1,2);
gr.Sphere(mglPoint(0,0.5,0),0.25,"r");
gr.Drop(mglPoint(0,-0.5,0),mglPoint(0,0.3,0),0.3,"m",1,2);
gr.Sphere(mglPoint(0,-0.5,0),0.25,"r");
gr.SubPlot(2,2,3);
gr.Text(mglPoint(0,1.2),"Ammonia, NH_3",0,-3); gr.Rotate(60,120);
gr.Sphere(mglPoint(0,0,0),0.25,"b");
gr.Drop(mglPoint(0,0,0),mglPoint(0.33,0.57,0),0.32,"n",1,2);
gr.Sphere(mglPoint(0.33,0.57,0),0.25,"g");
gr.Drop(mglPoint(0,0,0),mglPoint(0.33,-0.57,0),0.32,"n",1,2);
gr.Sphere(mglPoint(0.33,-0.57,0),0.25,"g");
gr.Drop(mglPoint(0,0,0),mglPoint(-0.65,0,0),0.32,"n",1,2);
gr.Sphere(mglPoint(-0.65,0,0),0.25,"g");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
alpha on
light on
subplot 2 2 0
text 0 1.2 'Methane, CH_4' '' -3
rotate 60 120
sphere 0 0 0 0.25 'k'
drop 0 0 0 0 0 1 0.35 'h' 1 2
sphere 0 0 0.7 0.25 'g'
drop 0 0 0 -0.94 0 -0.33 0.35 'h' 1 2
sphere -0.66 0 -0.23 0.25 'g'
drop 0 0 0 0.47 0.82 -0.33 0.35 'h' 1 2
sphere 0.33 0.57 -0.23 0.25 'g'
drop 0 0 0 0.47 -0.82 -0.33 0.35 'h' 1 2
sphere 0.33 -0.57 -0.23 0.25 'g'
subplot 2 2 1
text 0 1.2 'Water, H{_2}O' '' -3
rotate 60 100
sphere 0 0 0 0.25 'r'
drop 0 0 0 0.3 0.5 0 0.3 'm' 1 2
sphere 0.3 0.5 0 0.25 'g'
drop 0 0 0 0.3 -0.5 0 0.3 'm' 1 2
sphere 0.3 -0.5 0 0.25 'g'
subplot 2 2 2
text 0 1.2 'Oxygen, O_2' '' -3
rotate 60 120
drop 0 0.5 0 0 -0.3 0 0.3 'm' 1 2
sphere 0 0.5 0 0.25 'r'
drop 0 -0.5 0 0 0.3 0 0.3 'm' 1 2
sphere 0 -0.5 0 0.25 'r'
subplot 2 2 3
text 0 1.2 0 'Ammonia, NH_3' '' -3
rotate 60 120
sphere 0 0 0 0.25 'b'
drop 0 0 0 0.33 0.57 0 0.32 'n' 1 2
sphere 0.33 0.57 0 0.25 'g'
drop 0 0 0 0.33 -0.57 0 0.32 'n' 1 2
sphere 0.33 -0.57 0 0.25 'g'
drop 0 0 0 -0.65 0 0 0.32 'n' 1 2
sphere -0.65 0 0 0.25 'g'
@end verbatim
@c ------------------------------------------------------------------
@node Advanced features, , Additional features, Samples
@section Advanced features
@menu
* Curvelinear coorinates sample::  
* 2-axes sample::               
* Semi-log sample::             
* Log-log sample::              
* Fitting sample::              
* Envelop sample::              
* Sew sample::                  
* STFA sample::                 
* PDE sample::                  
* Beam tracing sample::         
* Parser sample::               
* Manual ticks sample::         
* ColumnPlot sample::           
* StickPlot sample::            
* Stereo image sample::         
@end menu
@c ------------------------------------------------------------------
@node Curvelinear coorinates sample, 2-axes sample, , Advanced features
@subsection Curvelinear coorinates sample
@cindex Axis
@float
@image{../png/sample3, 7cm}
@c @caption{Example of curvelinear coorinates usage. @tdref{sample3}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Org = mglPoint(-1,1,-1);
gr.SubPlot(2,2,0); gr.Rotate(60,40);
gr.Line(mglPoint(-1,0.5,0),mglPoint(1,0.5,0),"r2",100);
gr.Axis(); gr.Grid();
gr.Text(mglPoint(0,1.3,1),"Cartesian");
gr.SubPlot(2,2,1); gr.Rotate(60,40);
gr.SetFunc("y*sin(pi*x)","y*cos(pi*x)");
gr.Line(mglPoint(-1,0.5,0),mglPoint(1,0.5,0),"r2",100);
gr.Axis(); gr.Grid();
gr.Text(mglPoint(0,1.3,1),"Cylindrical");
gr.SubPlot(2,2,2); gr.Rotate(60,40);
gr.SetFunc("2*y*x","y*y - x*x");
gr.Line(mglPoint(-1,0.5,0),mglPoint(1,0.5,0),"r2",100);
gr.Axis(); gr.Grid();
gr.Text(mglPoint(0,1.3,1),"Parabolic");
gr.SubPlot(2,2,3); gr.Rotate(60,40);
gr.SetFunc("y*sin(pi*x)","y*cos(pi*x)","x+z");
gr.Line(mglPoint(-1,0.5,0),mglPoint(1,0.5,0),"r2",100);
gr.Axis(); gr.Grid();
gr.Text(mglPoint(0,1.3,1),"Spiral");
gr.Axis(0,0,0); // set to default Cartesian
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
origin -1 1 -1
subplot 2 2 0
rotate 60 40
line -1 0.5 0 1 0.5 0 'r2'
axis
grid
text 0 1.3 1 'Cartesian'
subplot 2 2 1
rotate 60 40
axis 'y*sin(pi*x)' 'y*cos(pi*x)' ''
line -1 0.5 0 1 0.5 0 'r2'
axis
grid
text 0 1.3 1 'Cylindrical'
subplot 2 2 2
rotate 60 40
axis '2*y*x' 'y*y - x*x' ''
line -1 0.5 0 1 0.5 0 'r2'
axis
grid
text 0 1.3 1 'Parabolic'
subplot 2 2 3
rotate 60 40
axis 'y*sin(pi*x)' 'y*cos(pi*x)' 'x+z'
line -1 0.5 0 1 0.5 0 'r2'
axis
grid
text 0 1.3 1 'Spiral'
axis '' '' '' # set to default Cartesian
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
mgl_set_origin(gr,-1,1,-1);
mgl_subplot(gr,2,2,0); mgl_rotate(gr,60,40,0);
mgl_line(gr,-1,0.5,0,1,0.5,0,"r2",100);
mgl_axis(gr,"xyz"); mgl_axis_grid(gr,"xyz","B");
mgl_text(gr,0,1.3,1,"Cartesian");
mgl_subplot(gr,2,2,1); mgl_rotate(gr,60,40,0);
mgl_set_func(gr,"y*sin(pi*x)","y*cos(pi*x)",0);
mgl_line(gr,-1,0.5,0,1,0.5,0,"r2",100);
mgl_axis(gr,"xyz"); mgl_axis_grid(gr,"xyz","B");
mgl_text(gr,0,1.3,1,"Cylindrical");
mgl_subplot(gr,2,2,2); mgl_rotate(gr,60,40,0);
mgl_set_func(gr,"2*y*x","y*y - x*x","");
mgl_line(gr,-1,0.5,0,1,0.5,0,"r2",100);
mgl_axis(gr,"xyz"); mgl_axis_grid(gr,"xyz","B");
mgl_text(gr,0,1.3,1,"Parabolic");
mgl_subplot(gr,2,2,3); mgl_rotate(gr,60,40,0);
mgl_set_func(gr,"y*sin(pi*x)","y*cos(pi*x)","x+z");
mgl_line(gr,-1,0.5,0,1,0.5,0,"r2",100);
mgl_axis(gr,"xyz"); mgl_axis_grid(gr,"xyz","B");
mgl_text(gr,0,1.3,1,"Spiral");
mgl_set_func(gr,0,0,0); /* set to default Cartesian */
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node 2-axes sample, Semi-log sample, Curvelinear coorinates sample, Advanced features
@subsection 2-axes sample
@cindex Axis
@float
@image{../png/2_axis, 7cm}
@c @caption{Example of 2 axes on the plot. @tdref{2_axis}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData y1(50), y2(50);
y1.Modify("0.3*sin(2*pi*x)"); y2.Modify("0.5+0.3*cos(2*pi*x)");
gr.Axis(mglPoint(-1,-1,-1),mglPoint(1,1,1),mglPoint(-1,-1,-1));
gr.Axis(); gr.Label('y',"axis 1",0);
gr.Plot(y1,"b");
gr.Axis(mglPoint(0,0,0),mglPoint(1,1,1),mglPoint(1,1,1));
gr.Axis(); gr.Label('y',"axis 2",0);
gr.Stem(y2,"r");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new y1 50
new y2 50
modify y1 '0.3*sin(2*pi*x)'
modify y2 '0.5+0.3*cos(2*pi*x)'
axis -1 -1 -1 1 1 1
origin -1 -1 -1
axis
ylabel 'axis 1' 0
plot y1 'b'
axis 0 0 0 1 1 1
origin 1 1 1
axis
ylabel 'axis 2' 0
stem y2 'r'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT y1 = mgl_create_data_size(50,1,1);
HMDT y2 = mgl_create_data_size(50,1,1);
mgl_data_modify(y1,"0.3*sin(2*pi*x)",0);
mgl_data_modify(y2,"0.5+0.3*cos(2*pi*x)",0);
mgl_set_axis_2d(gr,-1.,1.,-1.,1.);
mgl_set_origin(gr,-1.,-1.,-1.);
mgl_axis(gr,"xyz");
mgl_label_ext(gr,'y',"axis 1",0,-1.4,0.);
mgl_plot(gr,y1,"b");
mgl_set_axis_2d(gr,0.,0.,1.,1.);
mgl_set_origin(gr,1.,1.,1.);
mgl_axis(gr,"xyz");
mgl_label_ext(gr,'y',"axis 2",0,-1.4,0.);
mgl_stem(gr,y2,"r");
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Semi-log sample, Log-log sample, 2-axes sample, Advanced features
@subsection Semi-log sample
@cindex Axis
@cindex SetTicks
@cindex Plot
@float
@image{../png/semilog, 7cm}
@c @caption{Example of semi-log plot. @tdref{semilog}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData x(2000), y(2000);
x.Modify("0.01/(x+10^(-5))"); y.Modify("sin(1/v)",x);
gr.Axis(mglPoint(0.01,-1),mglPoint(1000,1),mglPoint(0.01,-1));
gr.SetFunc("lg(x)",0);  gr.SetTicks('x',0);
gr.Box();
gr.Plot(x,y,"b2");
gr.Axis(); gr.Grid("xy","g");
gr.Label('x',"x",0);   gr.Label('y', "y = sin 1/x",0);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new x 2000
new y 2000
modify x '0.01/(x+10^(-5))'
modify y 'sin(1/v)' x
xrange 0.01 1000
origin 0.01 -1 0
xtick 0
axis 'lg(x)' '' ''
plot x y 'b2'
axis
grid 'xy' 'g'
xlabel 'x' 0
ylabel 'y = sin 1/x' 0
box
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT x = mgl_create_data_size(2000,1,1);
HMDT y = mgl_create_data_size(2000,1,1);
mgl_data_modify(x,"0.01/(x+10^(-5))",0);
mgl_data_modify_vw(y,"sin(1/v)",x,0);
mgl_set_axis(gr,0.01,-1.,0.,1000.,1.,0.,0.01,-1.,0.);
mgl_set_func(gr,"lg(x)",0,0);
mgl_set_ticks(gr,0.,-5.,-5.);
mgl_box(gr,1);
mgl_plot_xy(gr,x,y,"b2");
mgl_axis(gr,"xy"); mgl_axis_grid(gr,"xy","g");
mgl_label_ext(gr,'x',"x",0,-1.4,0);
mgl_label_ext(gr,'y', "y = sin 1/x",0,-1.4,0);
mgl_delete_data(x); mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Log-log sample, Fitting sample, Semi-log sample, Advanced features
@subsection Log-log sample
@cindex Axis
@cindex SetTicks
@cindex Plot
@float
@image{../png/loglog, 7cm}
@c @caption{Example of log-log plot. @tdref{loglog}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData x(100), y(100);
x.Modify("pow(10,6*x-3)"); y.Modify("sqrt(1+v^2)",x);
gr.Axis(mglPoint(0.001,0.1),mglPoint(1000,1000),mglPoint(0.001,0.1));
gr.SetFunc("lg(x)","lg(y)");
gr.SetTicks('x',0);    gr.SetTicks('y',0);
gr.Box();
gr.Plot(x,y,"b2");
gr.Axis(); gr.Grid("xy","g;");
gr.Label('x',"x",0); gr.Label('y', "y=\\sqrt{1+x^2}",0);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new x 100
new y 100
modify x 'pow(10,6*x-3)'
modify y 'sqrt(1+v^2)' x
axis 0.001 0.1 1000 1000
xtick 0
ytick 0
axis 'lg(x)' 'lg(y)' ''
plot x y 'b2'
axis
grid 'xy' 'g;'
xlabel 'x' 0
ylabel 'y=\sqrt{1+x^2}' 0
box
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT x = mgl_create_data_size(100,1,1);
HMDT y = mgl_create_data_size(100,1,1);
mgl_data_modify(x,"pow(10,6*x-3)",0);
mgl_data_modify_vw(y,"sqrt(1+v^2)",x,0);
mgl_set_axis(gr,0.001,0.1,0.,1000.,1000.,0.,0.001,0.1,0.);
mgl_set_func(gr,"lg(x)","lg(y)",0);
mgl_set_ticks(gr,0.,0.,-5.);
mgl_box(gr,1);
mgl_plot_xy(gr,x,y,"b2");
mgl_axis(gr,"xy"); mgl_axis_grid(gr,"xy","g;");
mgl_label_ext(gr,'x',"x",0,-1.4,0);
mgl_label_ext(gr,'y', "y=\\sqrt{1+x^2}",0,-1.4,0);
mgl_delete_data(x); mgl_delete_data(y);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Fitting sample, Envelop sample, Log-log sample, Advanced features
@subsection Fitting sample
@cindex Fit
@cindex PutsFit
@float
@image{../png/fit, 7cm}
@c @caption{Example of nonlinear fitting. @tdref{fit}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData rnd(100), in(100), res;
rnd.Fill("0.4*rnd+0.1+sin(2*pi*x)", gr.Min, gr.Max);
in.Fill("0.3+sin(2*pi*x)", gr.Min, gr.Max);
gr.Axis(mglPoint(-1,-2), mglPoint(1,2));
gr.Plot(rnd, ". ");
gr.Box();
float ini[3] = {1,1,3};
gr.Fit(res, rnd, "a+b*sin(c*x)", "abc", ini);
gr.Plot(res, "r");
gr.Plot(in, "b");
gr.Text(mglPoint(-1, -1.3), "fitted:", "L:r", -1);
gr.PutsFit(mglPoint(0, -1.8), "y = ", "C:r", -1);
gr.Text(mglPoint(0, 2.2), "initial: y = 0.3+sin(2\\pi x)", "C:b", -1);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new rnd 100
fill rnd '0.4*rnd+0.1+sin(2*pi*x)'
new in 100
fill in '0.3+sin(2*pi*x)'
yrange -2 2
plot rnd '. '
box
list ini 1 1 3
fit res rnd 'a+b*sin(c*x)' 'abc' ini
plot res 'r'
plot in 'b'
text -1 -1.3 'fitted:' 'L:r' -1
putsfit 0 -1.8 'y = ' 'C:r'
text 0 2.2 'initial: y = 0.3+sin(2\pi x)' 'C:b' -1
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT rnd,in,res;
float ini[3] = {1,1,3};
rnd = mgl_create_data_size(100,1,1);
in = mgl_create_data_size(100,1,1);
res = mgl_create_data();
mgl_data_modify(rnd,"0.4*rnd+0.1+sin(4*pi*x)",0);
mgl_data_modify(in,"0.3+sin(4*pi*x)",0);
mgl_set_axis_2d(gr,-1.,-2.,1.,2.);
mgl_plot(gr,rnd,". ");
mgl_box(gr,1);
mgl_fit_1(gr,res,rnd,"a+b*sin(c*x)","abc",ini);
mgl_plot(gr,res,"r");   mgl_plot(gr,in,"b");
mgl_puts_ext(gr,-1.,-1.3,0.,"fitted:","L:r",-1.,'t');
mgl_puts_fit(gr,0.,-1.8,0.,"y = ","C:r",-1.);
mgl_puts_ext(gr,0.,2.2,0.,"initial: y = 0.3+sin(2\\pi x)","C:b", -1., 't');
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Envelop sample, Sew sample, Fitting sample, Advanced features
@subsection Envelop sample
@cindex Envelop
@float
@image{../png/envelop, 7cm}
@c @caption{Example of envelop reconstruction.}@c @tdref{envelop}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(1000);
a.Fill("exp(-8*x^2)*sin(10*pi*x)", gr.Min, gr.Max);
gr.Plot(a, "b");
a.Envelop('x');
gr.Plot(a, "r");
gr.Axis();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 1000
fill a 'exp(-8*x^2)*sin(10*pi*x)'
plot a 'b'
envelop a
plot a 'r'
axis
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(1000,1,1);
mgl_data_fill_eq(gr,a, "exp(-8*x^2)*sin(10*pi*x)", 0,0);
mgl_plot(gr,a,"b");
mgl_data_envelop(a,'x');
mgl_plot(gr,a,"r");
mgl_axis(gr,"xyz");
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Sew sample, STFA sample, Envelop sample, Advanced features
@subsection Sew sample
@cindex Sew
@float
@image{../png/sew, 7cm}
@c @caption{Example of phase ``sewing''.}@c @tdref{sew}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(100, 100);
a.Modify("mod((y^2-(1-x)^2)/2,0.1)");
gr.Rotate(40, 60);
gr.Light(true);
gr.Alpha(true);
gr.Surf(a, "b");
a.Sew("xy", 0.1);
gr.Surf(a, "r");
gr.Box();
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 100 100
modify a 'mod((y^2-(1-x)^2)/2,0.1)'
rotate 40 60
light on
alpha on
surf a 'b'
sew a 'xy' 0.1
surf a 'r'
box
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(100,100,1);
mgl_data_modify(a, "mod((y^2-(1-x)^2)/2, 0.1)", 0);
mgl_rotate(gr,40.,60.,0.);
mgl_set_light(gr,1);
mgl_set_alpha(gr,1);
mgl_surf(gr,a,"b");
mgl_data_sew(a,"xy",0.1);
mgl_surf(gr,a,"r");
mgl_box(gr,1);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node STFA sample, PDE sample, Sew sample, Advanced features
@subsection STFA sample
@cindex STFA
@float
@image{../png/stfa, 7cm}
@c @caption{Example of Short Time Fourier Analysis.}@c @tdref{stfa}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(2000), b(2000);
a.Fill("cos(50*pi*x)*(x<-.5)+cos(100*pi*x)*(x<0)*(x>-.5)+ \
        cos(200*pi*x)*(x<.5)*(x>0)+cos(400*pi*x)*(x>.5)", 
        gr.Min, gr.Max);
gr.SubPlot(1, 2, 0);
gr.Plot(a);
gr.Axis();
gr.Label('x', "\\i t");
gr.SubPlot(1, 2, 1);
gr.STFA(a, b, 64);
gr.Axis();
gr.Label('x', "\\i t");
gr.Label('y', "\\omega", 0);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 2000
new b 2000
fill a 'cos(50*pi*x)*(x<-.5)+cos(100*pi*x)*(x<0)*(x>-.5)+
        cos(200*pi*x)*(x<.5)*(x>0)+cos(400*pi*x)*(x>.5)'
subplot 1 2 0
plot a
axis
xlabel '\i t'
subplot 1 2 1
stfa a b 64 ''
axis
ylabel '\omega' 0
xlabel '\i t'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(2000,1,1);
HMDT b = mgl_create_data_size(2000,1,1);
mgl_data_fill_eq(gr, a, "cos(50*pi*x)*(x<-.5)+cos(100*pi*x)*(x<0)*(x>-.5)+ \
        cos(200*pi*x)*(x<.5)*(x>0)+cos(400*pi*x)*(x>.5)",0,0);
mgl_subplot(gr,1,2,0);
mgl_plot(gr,a,"");
mgl_axis(gr,"xy");
mgl_label(gr,'x', "\\i t");
mgl_subplot(gr,1,2,1);
mgl_stfa(gr,a,b,64,"",0.);
mgl_axis(gr,"xy");
mgl_label(gr,'x', "\\i t");
mgl_label(gr,'y', "\\omega");
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node PDE sample, Beam tracing sample, STFA sample, Advanced features
@subsection PDE sample
@cindex mglPDE
@cindex mglRay
@float
@image{../png/pde, 7cm}
@c @caption{Example of Partial Differential Eduation solving.}@c @tdref{pde}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a,re(128),im(128);
gr.Axis();
gr.Label('x', "\\i x");
gr.Label('y', "\\i z");
	
re.Fill("exp(-48*(x+0.7)^2)", gr.Min, gr.Max);
a = mglPDE("p^2+q^2-x-1+i*0.5*(z+x)*(z>-x)", re, im, gr.Min, gr.Max, 0.01, 30);
a.Transpose("yxz");
gr.CAxis(0, 1);
gr.Dens(a,"wyrRk");
gr.Plot("-x", "k|");
gr.Puts(mglPoint(0, 0.85), "absorption: (x+z)/2 for x+z>0");
gr.Title("\\r{Equation:} ik_0\\partial_zu + \\Delta u + x\\cdot u + \
i \\frac{x+z}{2}\\cdot u = 0", "iC", -1.5);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
axis
xlabel '\i x'
ylabel '\i z'
new re 128
new im 128
fill re 'exp(-48*(x+0.7)^2)'
pde a 'p^2+q^2-x-1+i*0.5*(z+x)*(z>-x)' re im 0.01 30
transpose a
crange 0 1
dens a 'wyrRk'
fplot '-x' 'k|'
text 0 0.85 'absorption: (x+z)/2 for x+z>0' '' -1
title 'Equation: ik_0\partial_zu + \Delta u + x\cdot u + i \frac{x+z}{2}\cdot u = 0' 'iC' -1.5
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data();
HMDT re = mgl_create_data_size(128,1,1);
HMDT im = mgl_create_data_size(128,1,1);
mgl_axis(gr,"xyz");
mgl_label(gr,'x', "\\i x");
mgl_label(gr,'y', "\\i z");
mgl_data_fill_eq(gr,re,"exp(-48*(x+0.7)^2)", 0, 0);
a = mgl_pde_solve(gr, "p^2+q^2-x-1+i*0.5*(z+x)*(z>-x)", re, im, 0.01, 30.);
mgl_data_transpose(a, "yxz");
mgl_set_caxis(gr, 0, 1);
mgl_dens(gr, a,"wyrRk", -1.);
mgl_fplot(gr, "-x", "k|", 100);
mgl_puts(gr, 0., 0.85, 0., "absorption: (x+z)/2 for x+z>0");
mgl_title(gr, "\\r{Equation:} ik_0\\partial_zu + \\Delta u + x\\cdot u + \
i \\frac{x+z}{2}\\cdot u = 0", "iC", -1.5);
mgl_delete_data(a);
mgl_delete_data(im);
mgl_delete_data(re);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Beam tracing sample, Parser sample, PDE sample, Advanced features
@subsection Beam tracing sample
@cindex mglQO2d
@cindex mglRay
@float
@image{../png/qo2d, 7cm}
@c @caption{Example of ray and beam tracing. Compare with @ref{PDE sample}.}@c @tdref{qo2d}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData r, xx, yy, a, im(128), re(128);
const char *ham = "p^2+q^2-x-1+i*0.5*(y+x)*(y>-x)";
r = mglRay(ham, mglPoint(-0.7, -1), mglPoint(0, 0.5), 0.02, 2);
gr.Plot(r.SubData(0), r.SubData(1), "k");
gr.Axis();	gr.Label('x', "\\i x");	gr.Label('y', "\\i z");
// now start beam tracing
re.Fill("exp(-48*x^2)", gr.Min, gr.Max);
a = mglQO2d(ham, re, im, r, 1, 30, &xx, &yy);
gr.CAxis(0, 1);
gr.Dens(xx, yy, a, "wyrRk");
gr.Plot("-x", "k|");
gr.Puts(mglPoint(0, 0.85), "absorption: (x+y)/2 for x+y>0");
gr.Puts(mglPoint(0.7, -0.05), "central ray");
gr.Title("Beam and ray tracing", "C", -1.5);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
define $1 'p^2+q^2-x-1+i*0.5*(y+x)*(y>-x)'
ray r $1 -0.7 -1 0 0 0.5 0 0.02 2
plot r(0) r(1) 'k'
axis
xlabel '\i x'
ylabel '\i z'
new re 128
new im 128
new xx
new yy
fill re 'exp(-48*x^2)'
qo2d a $1 re im r 1 30 xx yy 
crange 0 1
dens xx yy a 'wyrRk'
fplot '-x' 'k|'
text -0.8 0.85 'absorption: (x+y)/2 for x+y>0' 'L' -1
text 0.5 -0.05 'central ray' 'L' -1
title 'Beam and ray tracing' 'C' -1.5
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
const char *ham = "p^2+q^2-x-1+i*0.5*(y+x)*(y>-x)";
HMDT r, xx, yy, a, im, re;
im = mgl_create_data_size(128,1,1);
re = mgl_create_data_size(128,1,1);
r = mgl_ray_trace(ham, -0.7, -1., 0., 0., 0.5, 0., 0.02, 2.);
xx = mgl_data_subdata(r,0,-1,-1);
yy = mgl_data_subdata(r,1,-1,-1);
mgl_plot_xy(gr, xx, yy, "k");
mgl_axis(gr,"xyz");
mgl_label(gr,'x',"\\i x");
mgl_label(gr,'y',"\\i z");
mgl_data_fill_eq(gr,re,"exp(-48*x^2)", 0, 0);
a = mgl_qo2d_solve(ham, re, im, r, 1, 30, xx, yy);
mgl_set_caxis(gr,0.,1.);
mgl_dens_xy(gr,xx, yy, a, "wyrRk", -1.);
mgl_fplot(gr,"-x", "k|",100);
mgl_puts(gr, 0., 0.85, 0., "absorption: (x+y)/2 for x+y>0");
mgl_puts(gr, 0.7, -0.05, 0., "central ray");
mgl_title(gr, "Beam and ray tracing", "C", -1.5);
mgl_delete_data(a);     mgl_delete_data(r);
mgl_delete_data(xx);    mgl_delete_data(yy);
mgl_delete_data(im);    mgl_delete_data(re);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Parser sample, Manual ticks sample, Beam tracing sample, Advanced features
@subsection Parser sample
@cindex mglParse
@ifclear UDAV
@float
@image{../png/parser, 7cm}
@c @caption{Example of MGL parsing.}@c @tdref{parser}}
@end float
@strong{C++/Python code}
@verbatim
float a[100];   // let a_i = sin(4*pi*x), x=0...1
for(int i=0;i<100;i++) a[i]=sin(4*M_PI*i/99);
mglParse *parser = new mglParse;
mglData &d = (parser->AddVar("dat"))->d;
d.Set(a,100);   // set data to variable
parser->Execute(gr, "plot dat; xrange 0 1\nbox\naxis");
// you may break script at any line do something
// and continue after that
parser->Execute(gr, "xlabel 'x'\nylabel 'y'\nbox");
// also you may use cycles or conditions in script
parser->Execute(gr, "for $0 -1 1 0.1\nline 0 0 -1 $0 'r'\nnext");
@end verbatim
@strong{MGL code}
@verbatim
NOT AVAILABLE
@end verbatim
@strong{C/Fortran code}
@verbatim
float a[100];   /* let a_i = sin(4*pi*x), x=0...1 */
int i;
for(i=0;i<100;i++)  a[i]=sin(4*M_PI*i/99);
HMPR parser = mgl_create_parser();
HMDT d = mgl_add_var(parser, "dat");
mgl_data_set_float(d,a,100,1,1);    /* set data to variable */
mgl_parse_text(gr, parser, "plot dat; xrange 0 1\nbox\naxis");
/* you may break script at any line do something 
   and continue after that */
mgl_parse_text(gr, parser, "xlabel 'x'\nylabel 'y'");
/* also you may use cycles or conditions in script */
mgl_parse_text(gr, parser, "for $0 -1 1 0.1\nline 0 0 -1 $0 'r'\nnext");
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Manual ticks sample, ColumnPlot sample, Parser sample, Advanced features
@subsection Tick values sample
@cindex SetTicksVal
@float
@image{../png/tval, 7cm}
@c @caption{Example of manual tick values.}@c @tdref{tval}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.Axis(mglPoint(-M_PI, 0), mglPoint(M_PI, 2));
gr.SetTicksVal('x', 6, -M_PI, "-\\pi", -M_PI/2, "-\\pi/2", 0., "0",
                0.886, "x^*", M_PI/2, "\\pi/2", M_PI, "\\pi");
gr.Axis();     gr.Grid();
gr.Plot("2*cos(x^2)^2", "r2", NAN, 300);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
axis -pi 0 pi 2
xtick -pi '-\pi' -1.571 '-\pi/2' 0 '0' 0.886 'x^*' 1.571 '\pi/2' pi '\pi'
axis 
grid
fplot '2*cos(x^2)^2' 'r2' nan 300
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
mgl_set_axis_2d(gr, -M_PI, 0, M_PI, 2);
mgl_set_ticks_val(gr, 'x', 6, -M_PI, "-\\pi", -M_PI/2, "-\\pi/2",
            0., "0", 0.886, "x^*", M_PI/2, "\\pi/2", M_PI, "\\pi");
mgl_axis(gr,"xyz");
mgl_axis_grid(gr,"xyz", "B-");
mgl_fplot(gr, "2*cos(x^2)^2", "r2", 300);
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node ColumnPlot sample, StickPlot sample, Manual ticks sample, Advanced features
@subsection ColumnPlot sample
@cindex ColumnPlot
@float
@image{../png/column, 7cm}
@c @caption{Example of ColumnPlot.}@c @tdref{column}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
char str[32];
for(int i=0;i<4;i++)
{
        gr.ColumnPlot(4,i);
        gr.Box();
        sprintf(str,"Plot %d of 4",i);
        gr.Text(mglPoint(-0.5,0.5),str);
        sprintf(str,"sin(pi*x+pi*%d/2)",i);
        gr.Plot(str);
}
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
for $1 0 3
columnplot 4 $1
box
text -0.5 0.5 'Plot $1 of 4'
fplot 'sin(pi*x+pi*$1/2)'
next
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
int i;
char str[32];
for(i=0;i<4;i++)
{
        mgl_columnplot(gr,4,i);
        mgl_box(gr,1);
        sprintf(str,"Plot %d of 4",i);
        mgl_text(gr,-0.5,0.5,0.,str);
        sprintf(str,"sin(pi*x+pi*%d/2)",i);
        mgl_fplot(gr,str,"",100);
}
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node StickPlot sample, Stereo image sample, ColumnPlot sample, Advanced features
@subsection StickPlot sample
@cindex StickPlot
@float
@image{../png/stick, 7cm}
@c @caption{Example of StickPlot.}@c @tdref{stick}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
gr.SetRanges(-1, 1, -1, 1, 0, 1);  gr.Light(true);
gr.StickPlot(3, 0, 40, 30);        gr.Axis("xyz_");
gr.Surf("exp(-10*y^2-6*x^2)");
gr.Text(mglPoint(0.2, 0, 1.2), "z=0", "", -2);
gr.StickPlot(3, 1, 40, 30);        gr.Axis("xyz_");
gr.Surf("exp(-10*y^2/2-6*x^2)/sqrt(2)");
gr.Text(mglPoint(0.2, 0, 1.2), "z=1", "", -2);
gr.StickPlot(3, 2, 40, 30);        gr.Axis("xyz_");
gr.Surf("exp(-10*y^2/5-6*x^2)/sqrt(5)");
gr.Text(mglPoint(0.2, 0, 1.2), "z=2", "", -2);
gr.Label('x',"\\tau", 0);  gr.Label('y', "\\rho");
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
ranges -1 1 -1 1 0 1:light on
stickplot 3 0 40 30 : axis 'xyz_'
fsurf 'exp(-10*y^2-6*x^2)'
text 0.2 0 1.2 'z=0' '' -2
stickplot 3 1 40 30 : axis 'xy_'
fsurf 'exp(-10*y^2/2-6*x^2)/sqrt(2)'
text 0.2 0 1.2 'z=1' '' -2
stickplot 3 2 40 30 : axis 'xy_'
fsurf 'exp(-10*y^2/5-6*x^2)/sqrt(5)'
text 0.2 0 1.2 'z=2' '' -2
xlabel '\tau' 0 : ylabel '\rho'
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
mgl_set_axis_3d(gr, -1, -1, 0, 1, 1, 1);
mgl_set_light(gr, 1);
mgl_stickplot(gr, 3, 0, 40, 30);
mgl_axis(gr, "xyz_");
mgl_fsurf(gr,"exp(-10*y^2-6*x^2)","",100);
mgl_text(gr, 0.2, 0, 1.2, "z=0");
mgl_stickplot(gr, 3, 1, 40, 30);
mgl_axis(gr, "xyz_");
mgl_fsurf(gr,"exp(-10*y^2/2-6*x^2)/sqrt(2)","",100);
mgl_text(gr, 0.2, 0, 1.2, "z=1");
mgl_stickplot(gr, 3, 2, 40, 30);
mgl_axis(gr, "xyz_");
mgl_fsurf(gr,"exp(-10*y^2/5-6*x^2)/sqrt(5)","",100);
mgl_text(gr, 0.2, 0, 1.2, "z=2");
mgl_label(gr,'x',"\\tau");
mgl_label(gr,'y', "\\rho");
@end verbatim
@end ifclear
@c ------------------------------------------------------------------
@node Stereo image sample, , StickPlot sample, Advanced features
@subsection Stereo image sample
@float
@image{../png/stereo, 7cm}
@c @caption{Example of stereo image.}@c @tdref{stereo}}
@end float
@ifclear UDAV
@strong{C++/Python code}
@verbatim
mglData a(50,40);
a.Modify("0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))");
gr.Light(true);
gr.SubPlot(2,1,0);
gr.Rotate(40,60+3);
gr.Box();   gr.Surf(a);
gr.SubPlot(2,1,1);
gr.Rotate(40,60-3);
gr.Box();   gr.Surf(a);
@end verbatim
@strong{MGL code}
@end ifclear
@verbatim
new a 50 40
modify a '0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))'
light on
subplot 2 1 0
rotate 40 60+3
box:surf a
subplot 2 1 1
rotate 40 60-3
box:surf a
@end verbatim
@ifclear UDAV
@strong{C/Fortran code}
@verbatim
HMDT a = mgl_create_data_size(50,40,1);
mgl_data_modify(a,"0.6*sin(2*pi*x)*sin(3*pi*y) + 0.4*cos(3*pi*(x*y))",0);
mgl_set_light(gr,1);
mgl_subplot(gr,2,1,0);
mgl_rotate(gr,40.,60.+3.,0.);
mgl_box(gr,1);
mgl_surf(gr,a,0);
mgl_subplot(gr,2,1,1);
mgl_rotate(gr,40.,60.-3.,0.);
mgl_box(gr,1);
mgl_surf(gr,a,0);
mgl_delete_data(a);
@end verbatim
@end ifclear

