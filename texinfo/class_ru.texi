
@c ------------------------------------------------------------------
@chapter Классы для отрисовки
@cindex mglGraphAB
@cindex mglGraphZB
@cindex mglGraphPS
@cindex mglGraphGL
@cindex mglGraphIDTF

Класс mglGraph (@pxref{MathGL core}) обеспечивает базовые функции для создания научной графики, но это абстрактный класс. Причина в том, что существует несколько возможностей вывода/отображения получившегося рисунка: в растровый или в векторный файлы, используя OpenGL и т.д. В результате, для конечной отрисовки необходимо использовать производные классы. В принципе, можно наследовать непосредственно mglGraph (и так было до версии 1.6). Однако, я рекомендую использовать в качестве базового класс mglGraphAB для большего единообразия получающейся графики в различных классах. Класс mglGraphAB -- другой абстрактный класс, обеспечивающий преобразование координат, базовые функции рисования и сохранения в растровое изображение. Он требует доопределения функций рисования линий, треугольников и четырехугольников. Ниже приведены классы ``отрисовки'' с короткими комментариями.

@deftp {Класс} mglGraphAB
Абстрактный класс, обеспечивающий отрисовку по глубине, преобразование к экранным координатам, сохранение в растровое изображение и т.д. Класс определен в @code{#include <mgl/mgl_ab.h>}.
@end deftp

@deftp {Класс} mglGraphZB
Реализует растровую отрисовку изображения используя Z-Buffer. Можно использовать для рисования в памяти (или в консоли/SSH терминале). Также этот класс используется как базовый для рисования в окне (например, используя FLTK, Qt, wxWidgets библиотеки и пр.). При экспорте в EPS формат сохраняется растровая картинка. Получающийся рисунок лучшего качества, но рисуется медленнее чем в классе mglGraphPS. Класс определен в @code{#include <mgl/mgl_zb.h>}.
@end deftp

@deftp {Класс} mglGraphPS
Реализует векторную отрисовку изображения с возможностью сохранения в векторный PostScript или SVG файл. Можно использовать для рисования в памяти (или в консоли/SSH терминале). Замечу, что сглаживание цвета не поддерживается, а при экспорте в EPS не поддерживается и прозрачность (в силу ограничения формата). В результате рисунок получается быстрее, но более низкого качества чем в классе mglGraphZB. Класс определен в @code{#include <mgl/mgl_eps.h>}.
@end deftp

@deftp {Класс} mglGraphGL
Реализует векторную графику с использованием OpenGL. Класс не может быть использован для рисования в консоли. В силу ограничения OpenGL возможна проблема корректного отображения нескольких перекрывающихся поверхностей. Класс определен в @code{#include <mgl/mgl_gl.h>}.
@end deftp

@deftp {Класс} mglGraphIDTF
Реализует экспорт графики в IDTF формате, который затем можно преобразовать в формат U3D. Класс определен в @code{#include <mgl/mgl_idtf.h>}.
@end deftp

@menu
* mglGraphAB class::            
@end menu

@c ------------------------------------------------------------------
@node mglGraphAB class, , , Plotter classes
@section Класс mglGraphAB
@cindex mglGraphAB
@cindex window
@cindex mglDraw

Вообще говоря это чуть ``менее абстрактный'' класс чем mglGraph (@pxref{MathGL core}). Он предоставляет много методов для обработки промежуточных данных и требует в производных классах определения только нескольких методов для отрисовки примитивов. Разработчикам, наследующим этот класс, следует посмотреть файл @samp{mgl_ab.h} и комментарии в нем или обратиться к автору.

Ниже я только перечислю основные общедоступные методы класса mglGraphAB. В первую очередь это функции, возвращающие созданный растровый рисунок, его ширину и высоту. В дальнейшем его можно использовать в любой графической библиотеке (см. также, @ref{Widget classes}) или сохранить в файл (см. также, @ref{Export to file}).

@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{const unsigned char *} GetBits ()
@deftypefnx {Метод класса @code{mglGraph} (Python)} @code{void} GetRGB (@code{char *}buf, @code{int} size)
@deftypefnx {Метод класса @code{mglGraph} (Python)} @code{void} GetBGRN (@code{char *}buf, @code{int} size)
@deftypefnx {C function} @code{const unsigned char *} mgl_get_rgb (@code{HMGL} gr)
Возвращает растровое изображение в формате RGB для текущего кадра. Формат каждого элемента (пикселя): @{red, green, blue@}. Число элементов Width*Height. Положение элемента @{i,j@} есть [3*i + 3*Width*j] (или [4*i + 4*Width*j] для @code{GetBGRN()}). В Python вы должны предоставить буфер @var{buf} достаточного размера @var{size}, т.е. код должен выглядеть следующим образом 
@verbatim
from mathgl import *
gr = mglGraph();
bits='\t';
bits=bits.expandtabs(4*gr.GetWidth()*gr.GetHeight());
gr.GetBGRN(bits, len(bits));
@end verbatim
@end deftypefn

@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{const unsigned char *} GetRGBA ()
@deftypefnx {Метод класса @code{mglGraph} (Python)} @code{void} GetRGBA (@code{char *}buf, @code{int} size)
@deftypefnx {C function} @code{const unsigned char *} mgl_get_rgba (@code{HMGL} gr)
Возвращает растровое изображение в формате RGBA для текущего кадра. Формат каждого элемента (пикселя): @{red, green, blue, alpha@}. Число элементов Width*Height. Положение элемента @{i,j@} есть [4*i + 4*Width*j].
@end deftypefn

@deftypefn {Метод класса @code{mglGraphAB} (C++, Python)} @code{int} GetWidth ()
@deftypefnx {Метод класса @code{mglGraphAB} (C++, Python)} @code{int} GetHeight ()
@deftypefnx {C function} @code{int} mgl_get_width (@code{HMGL} gr)
@deftypefnx {C function} @code{int} mgl_get_height (@code{HMGL} gr)
Возвращает ширину и высоту изображения.
@end deftypefn

Класс mglGraphAB -- базовый класс для ``оконных классов''. Поэтому он содержит набор функций для создания и управления окном. Большинство из них применимо только в ``оконных классах'' (типа mglGraphFLTK и др, @pxref{Widget classes}). В остальных случаях функции ничего не делают. Если вы создаете оконный класс, то Вам следует предоставить такой же интерфейс для удобства пользователя.

@deftypemethod mglGraphAB @code{void} Window (@code{int} argc, @code{char **}argv, @code{int (*}draw)(@code{mglGraph *}gr, @code{void *}p), @code{const char *}title, @code{void *}par=@code{NULL}, @code{void (*}reload)(@code{int} next, @code{void *}p)=@code{NULL}, @code{bool} maximize=@code{false})
Создает окно для вывода графика. Параметры @var{argc}, @var{argv} содержат информацию операционной системы и их слеудет передать в эту функцию из функции @code{main(int argc,char **argv)} (хотя они и могут быть равны @code{NULL}). Параметр @var{draw} -- указатель (имя) функции рисования. Есть возможность создания нескольких кадров вначале (требует больше памяти) и их быстрая анимации в дальнейшем. В этом случае функция @var{draw} должна возвращать число кадров или ноль для рисования по запросу. Замечу, что @var{draw} может быть равна @code{NULL} для отображения статической (текущей) картинки. Параметр @var{title} задает заголовок окна. Параметр @var{par} содержит указатель на данные, передаваемые функции рисования @var{draw}. Параметр @var{maximize}=@code{true} открывает окно раскрытым на весь экран.

В окне просмотра можно использовать клавиши: 'a', 'd', 'w', 's' для вращения; ',', '.' для просмотра предыдущего и следующего кадров; 'r' для переключения прозрачности; 'f' для переключения оспещенности; 'x' для закрытия окна.

@strong{ВАЖНО!!!} Вам не следует вызывать функцию Rotate() (@pxref{Transformation matrix}) если Вы хотите вращать график.
@end deftypemethod

@deftypemethod mglGraphAB @code{void} Window (@code{int} argc, @code{char **}argv, @code{mglDraw *}draw, @code{const char *}title, @code{bool} maximize=@code{false})
В основном аналогична предыдущей. Основное отличие в том, что функции рисования и обновления данных определены в классе наследнике класса @code{mglDraw}. Этот класс определен в @code{#include <mgl/mgl_define.h>} и имеет только 2 метода:
@verbatim
class mglDraw
{
public:
    virtual int Draw(mglGraph *) { return 0; };
    virtual void Reload(int) {};
};
@end verbatim
Вы можете создать класс-наследник @code{mglDraw} и переопределить один или оба метода для использования с данной функцией.
@end deftypemethod


@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} ToggleAlpha ()
@deftypefnx {C function} @code{int} mgl_wnd_toggle_alpha (@code{HMGL} gr)
Включает/выключает прозрачность, но не перезаписывает настройки пользовательской функции рисования.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} ToggleLight ()
@deftypefnx {C function} @code{int} mgl_wnd_toggle_light (@code{HMGL} gr)
Включает/выключает освещение, но не перезаписывает настройки пользовательской функции рисования.
Switch on/off lighting but do not overwrite switches in user drawing function.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} ToggleZoom ()
@deftypefnx {C function} @code{int} mgl_wnd_toggle_zoom (@code{HMGL} gr)
Включает/выключает приближение выбранного мышью области рисунка.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} ToggleRotate ()
@deftypefnx {C function} @code{int} mgl_wnd_toggle_rotate (@code{HMGL} gr)
Включает/выключает режим вращения мышью. Обычно левая кнопка вращает график, средняя сдвигает, правая приближает и меняет перспективу.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} ToggleNo ()
@deftypefnx {C function} @code{int} mgl_wnd_toggle_no (@code{HMGL} gr)
Выключает режим приближения/вращения и восстанавливает вид по умолчанию.
Switch off all zooming and rotation and restore initial state.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} Update ()
@deftypefnx {C function} @code{int} mgl_wnd_update (@code{HMGL} gr)
Обновляет содержимое окна.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} ReLoad (@code{bool} o)
@deftypefnx {C function} @code{int} mgl_wnd_reload (@code{HMGL} gr, @code{int} val)
Перезагружает данные пользователя и обновляет картинку.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} Adjust ()
@deftypefnx {C function} @code{int} mgl_wnd_adjust (@code{HMGL} gr)
Подгоняет размер картинки под размер окна (виджета).
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} NextFrame ()
@deftypefnx {C function} @code{int} mgl_wnd_next_frame (@code{HMGL} gr)
Показывает следующий кадр.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} PrevFrame ()
@deftypefnx {C function} @code{int} mgl_wnd_prev_frame (@code{HMGL} gr)
Показывает предыдущий кадр.
Show previous frame if one.
@end deftypefn
@deftypefn {Метод класса @code{mglGraphAB} (C++)} @code{void} Animation ()
@deftypefnx {C function} @code{int} mgl_wnd_animation (@code{HMGL} gr)
Запускает/останавливает слайд-шоу (анимацию) кадров.
@end deftypefn

@deftypefn {C function} @code{int} mgl_wnd_set_auto_clf (@code{HMGL} gr, @code{int} val)
@end deftypefn
@deftypecv {Widget option} mglGraphAB @code{bool} AutoClf
Включает/выключает автоматическую очистку рисунка между перерисовкой. Выключение полезно для рисования с накоплением (например, результатов/точек расчета).
@end deftypecv

@deftypefn {C function} @code{int} mgl_wnd_set_delay (@code{HMGL} gr, @code{int} val)
@end deftypefn
@deftypecv {Widget option} mglGraphAB @code{float} Delay
Задержка анимации в секундах. По умолчанию равно 1 секунде.
@end deftypecv

@deftypefn {Метод класса @code{mglGraphAB} (C++, Python)} @code{mglPoint} CalcXYZ (@code{int} xs, @code{int} ys)
@deftypefnx {C function} @code{void} mgl_calc_xyz (@code{HMGL} gr, @code{int} xs, @code{int} ys, @code{float *}x, @code{float *}y, @code{float *}z)
Вычисляет 3D координаты @{x,y,z@} для экранной точки @{xs,ys@}. В данный момент игнорируется перспектива графика и формулы перехода в криволинейные координаты. Вычисления производятся для последнего использованного InPlot (@pxref{Transformation matrix}).
@end deftypefn

@deftypefn {Метод класса @code{mglGraphAB} (C++, Python)} @code{mglPoint} CalcScr (@code{mglPoint} p)
@deftypefnx {Метод класса @code{mglGraphAB} (C++)} @code{void} CalcScr (@code{mglPoint} p, @code{int *}xs, @code{int *}ys)
@deftypefnx {C function} @code{void} mgl_calc_scr (@code{HMGL} gr, @code{float} x, @code{float} y, @code{float} z, @code{int *}xs, @code{int *}ys)
Вычисляет экранные координаты @{xs,ys@} для 3D координат @{x,y,z@}. Вычисления производятся для последнего использованного InPlot (@pxref{Transformation matrix}).
@end deftypefn

@deftypefn {C function} @code{int} mgl_wnd_set_show_mouse_pos (@code{HMGL} gr, @code{int} val)
@end deftypefn
@deftypecv {Widget option} mglGraphAB @code{float} ShowMousePos
Включает/выключает показ координат последнего нажатия кнопки мыши на рисунке.
@end deftypecv

@deftypecv {Widget option} mglGraphAB @code{mglPoint} LastMousePos
Последнее положение нажатия кнопки мыши.
@end deftypecv

