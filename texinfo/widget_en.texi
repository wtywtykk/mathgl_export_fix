
@c ------------------------------------------------------------------
@chapter Widget classes
@cindex mglGraphFLTK
@cindex mglGraphQT
@cindex mglGraphGLUT
@cindex Fl_MathGL
@cindex QMathGL
@cindex window
@cindex widgets

There are set of ``window'' classes for making a window with MathGL graphics: @code{mglGraphFLTK}, @code{mglGraphQT}, @code{mglGraphGLUT}. All these classes allow user to show, rotate, export, and change view of the plot using keyboard. Most of them (except @code{mglGraphGLUT}) also have toolbar and menu for simplifying plot manipulation. Usually these classes (except @code{mglGraphGLUT}) are derived from @code{mglGraphZB} class and have a ``connected'' class for widget in corresponding window library. All window classes have the same set of functions (@pxref{mglGraphAB class}). Below the full list of classes with short comments.

@deftp {Class} mglGraphFLTK
Class @code{mglGraphFLTK} adds the possibility to create plotting window with the help of FLTK library. It allows one to show, rotate, export, and change view of the plot by keyboard, menu and toolbar. ``Corresponding'' widget class is @code{Fl_MathGL}. Class is defined in @code{#include <mgl/mgl_fltk.h>}.
@end deftp

@deftp {Class} Fl_MathGL
Class is FLTK widget for displaying the MathGL output. Class is defined in @code{#include <mgl/mgl_fltk.h>}.
@end deftp

@float
@image{fltk, 7cm}
@caption{Example of FLTK window with MathGL plot.}
@end float

@deftp {Class} mglGraphQT
Class @code{mglGraphQT} adds the possibility to create plotting window with the help of QT library. It allows one to show, rotate, export, and change view of the plot by keyboard, menu and toolbar. ``Corresponding'' widget class is @code{QMathGL}. Class is defined in @code{#include <mgl/mgl_qt.h>}.
@end deftp

@deftp {Class} QMathGL
Class is Qt widget for dysplaying the MathGL output. Class is defined in @code{#include <mgl/mgl_qt.h>}.
@end deftp

@float
@image{qt, 7cm}
@caption{Example of Qt window with MathGL plot.}
@end float

@deftp {Class} mglGraphGLUT
Class @code{mglGraphGLUT} adds the possibility to create plotting window with the help of GLUT library. It allows one to show, rotate, export, and change view of the plot only by keyboard. Class is defined in @code{#include <mgl/mgl_glut.h>}.
@end deftp

@float
@image{glut, 7cm}
@caption{Example of GLUT window with MathGL plot.}
@end float

@menu
* Fl_MathGL class::             
* QMathGL class::               
@end menu

@c ------------------------------------------------------------------
@node Fl_MathGL class, QMathGL class, , Widget classes
@section Fl_MathGL class
@cindex Fl_MathGL
@cindex widgets

Class is FLTK widget which display MathGL graphics (defined in @code{#include <mgl/mgl_fltk.h>}).

@deftypemethod Fl_MathGL @code{void} set_draw (@code{mglDraw *}dr)
Sets drawing function from a class inherited from @code{mglDraw}.
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} update (@code{mglGraph *}gr=@code{NULL})
Update (redraw) plot using grapher @var{gr} (built-in by default).
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_angle (@code{float} t, @code{float} p)
Set angles for additional plot rotation
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_state (@code{int} f)
Set bitwise flags for general state (1-Alpha, 2-Light)
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_state (@code{bool} z, @code{bool} r)
Set flags for handling mouse: @var{z}=@code{true} allow zooming, @var{r}=@code{true} allow rotation/shifting/perspective and so on.
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_zoom (@code{float} X1, @code{float} Y1, @code{float} X2, @code{float} Y2)
Set zoom in/out region
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} get_zoom (@code{float *}X1, @code{float *}Y1, @code{float *}X2, @code{float *}Y2)
Get zoom in/out region
@end deftypemethod
@deftypemethod Fl_MathGL @code{void} set_popup (@code{const Fl_Menu_Item *}pmenu, @code{Fl_Widget *}w, @code{void *}v)
Set popup menu pointer
@end deftypemethod
@deftypemethod Fl_MathGL @code{mglGraph *} get_graph ()
Get pointer to grapher
@end deftypemethod

@deftypecv {Widget option} Fl_MathGL @code{Fl_Valuator *} tet_val
Pointer to external tet-angle validator.
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{Fl_Valuator *} phi_val
Pointer to external phi-angle validator.
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{mglGraphAB *} graph
Pointer to grapher
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{void *} draw_par
Parameters for drawing function mglGraph::DrawFunc.
@end deftypecv
@deftypecv {Widget option} Fl_MathGL @code{int (*} draw_func @code{)(mglGraph *gr, void *par)}
Drawing function for window procedure. It should return the number of frames.
@end deftypecv

@c ------------------------------------------------------------------
@node QMathGL class, , Fl_MathGL class, Widget classes
@section QMathGL class
@cindex QMathGL
@cindex widgets

Class is Qt widget which display MathGL graphics (defined in @code{#include <mgl/mgl_qt.h>}).

@deftypemethod QMathGL @code{void} setDraw (@code{mglDraw *}dr)
Sets drawing functions from a class inherited from @code{mglDraw}.
@end deftypemethod
@deftypemethod QMathGL @code{void} setDraw (@code{int (*}draw)(@code{mglGraph *}gr, @code{void *}p), @code{void *}par=@code{NULL})
Sets the drawing function @var{draw}. There is support of a list of plots (frames). So as one can prepare a set of frames at first and redraw it fast later (but it requires more memory). Function should return positive number of frames for the list or zero if it will plot directly. Parameter @var{par} contains pointer to data for the plotting function @var{draw}.
@end deftypemethod

@deftypemethod QMathGL @code{void} setGraph (@code{mglGraphAB *}gr)
Set pointer to external grapher (instead of built-in @code{mglGraphZB}). Note that QMathGL will automatically delete this object at destruction or at new @code{setGraph()} call.
@end deftypemethod

@deftypemethod QMathGL @code{void} setPopup (@code{QMenu *}p)
Set popup menu pointer.
@end deftypemethod
@deftypemethod QMathGL @code{void} setSize (@code{int} w, @code{int} h)
Set widget/picture sizes
@end deftypemethod
@deftypemethod QMathGL @code{double} getRatio ()
Return aspect ratio of the picture.
@end deftypemethod

@deftypemethod QMathGL @code{int} getPer ()
Get perspective value in percents.
@end deftypemethod
@deftypemethod QMathGL @code{int} getPhi ()
Get Phi-angle value in degrees.
@end deftypemethod
@deftypemethod QMathGL @code{int} getTet ()
Get Theta-angle value in degrees.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getAlpha ()
Get transparency state.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getLight ()
Get lightning state.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getZoom ()
Get mouse zooming state.
@end deftypemethod
@deftypemethod QMathGL @code{bool} getRotate ()
Get mouse rotation state.
@end deftypemethod

@defop Slot QMathGL @code{void} refresh ()
Redraw saved bitmap without executing drawing function.
@end defop
@defop Slot QMathGL @code{void} update (@code{mglGraph *}gr=@code{NULL})
Update picture by executing drawing function.
@end defop
@defop Slot QMathGL @code{void} copy ()
Copy graphics to clipboard.
@end defop
@defop Slot QMathGL @code{void} setPer (@code{int} val)
Set perspective value.
@end defop
@defop Slot QMathGL @code{void} setPhi (@code{int} val)
Set Phi-angle value.
@end defop
@defop Slot QMathGL @code{void} setTet (@code{int} val)
Set Theta-angle value.
@end defop
@defop Slot QMathGL @code{void} setAlpha (@code{bool} val)
Switch on/off transparency.
@end defop
@defop Slot QMathGL @code{void} setLight (@code{bool} val)
Switch on/off lightning.
@end defop
@defop Slot QMathGL @code{void} setZoom (@code{bool} val)
Switch on/off mouse zooming.
@end defop
@defop Slot QMathGL @code{void} setRotate (@code{bool} val)
Switch on/off mouse rotation.
@end defop
@defop Slot QMathGL @code{void} zoomIn ()
Zoom in graphics.
@end defop
@defop Slot QMathGL @code{void} zoomOut ()
Zoom out graphics.
@end defop
@defop Slot QMathGL @code{void} restore ()
Restore zoom and rotation to default values.
@end defop
@defop Slot QMathGL @code{void} reload ()
Reload data and redraw graphics.
@end defop
@defop Slot QMathGL @code{void} shiftLeft ()
Shift graphics to left direction.
@end defop
@defop Slot QMathGL @code{void} shiftRight ()
Shift graphics to right direction.
@end defop
@defop Slot QMathGL @code{void}shiftUp  ()
Shift graphics to up direction.
@end defop
@defop Slot QMathGL @code{void} shiftDown ()
Shift graphics to down direction.
@end defop
@defop Slot QMathGL @code{void} exportPNG (@code{QString} fname=@code{""})
Export current picture to PNG file.
@end defop
@defop Slot QMathGL @code{void} exportPNGs (@code{QString} fname=@code{""})
Export current picture to PNG file (no transparency).
@end defop
@defop Slot QMathGL @code{void} exportJPG (@code{QString} fname=@code{""})
Export current picture to JPEG file.
@end defop
@defop Slot QMathGL @code{void} exportBPS (@code{QString} fname=@code{""})
Export current picture to bitmap EPS file.
@end defop
@defop Slot QMathGL @code{void} exportEPS (@code{QString} fname=@code{""})
Export current picture to vector EPS file.
@end defop
@defop Slot QMathGL @code{void} exportSVG (@code{QString} fname=@code{""})
Export current picture to SVG file.
@end defop
@defop Slot QMathGL @code{void} exportIDTF (@code{QString} fname=@code{""})
Export current picture to IDTF file.
@end defop
@defop Slot QMathGL @code{void} setMGLFont (@code{QString} path)
Restore (@var{path}=@code{""}) or load font for graphics.
@end defop
@defop Slot QMathGL @code{void} print ()
Print current picture
@end defop
@defop Slot QMathGL @code{void} adjust ()
Adjust plot size to fill entire window. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} nextSlide ()
Show next slide. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} prevSlide ()
Show previous slide. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} animation (@code{bool} st=@code{true})
Start animation. This function is executed only if graph is mglGraphQT instance.
@end defop
@defop Slot QMathGL @code{void} about ()
Show about information.
@end defop
@defop Slot QMathGL @code{void} aboutQt ()
Show information about Qt version.
@end defop

@defop Signal QMathGL @code{void} phiChanged (@code{int} val)
Phi angle changed (by mouse or by toolbar).
@end defop
@defop Signal QMathGL @code{void} tetChanged (@code{int} val)
Tet angle changed (by mouse or by toolbar).
@end defop
@defop Signal QMathGL @code{void} perChanged (@code{int} val)
Perspective changed (by mouse or by toolbar).
@end defop
@defop Signal QMathGL @code{void} alphaChanged (@code{bool} val)
Transparency changed (by toolbar).
@end defop
@defop Signal QMathGL @code{void} lightChanged (@code{bool} val)
Lighting changed (by toolbar).
@end defop
@defop Signal QMathGL @code{void} zoomChanged (@code{bool} val)
Zooming changed (by toolbar).
@end defop
@defop Signal QMathGL @code{void} rotateChanged (@code{bool} val)
Rotation changed (by toolbar).
@end defop

@deftypecv {Widget option} QMathGL @code{QString} appName
Application name for message boxes.
@end deftypecv
@deftypecv {Widget option} QMathGL @code{bool} autoResize
Allow auto resizing (default is false).
@end deftypecv
@deftypecv {Widget option} QMathGL @code{int} animDelay
Animation delay in ms.
@end deftypecv


