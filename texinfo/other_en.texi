
@c ------------------------------------------------------------------
@chapter Other classes

@menu
* mglFormula class::            
* mglColor class::              
* mglPoint class::              
* mglFont class::
@end menu


@c ------------------------------------------------------------------
@node mglFormula class, mglColor class, , Other classes
@section mglFormula class
@cindex mglFormula

Class for evaluating of formula specified by the string. This class is defined in @code{#include <mgl/eval.h>}. This class is accessible only from C++ (and only from GNU compilers in default binary files).

It is the fast variant of formula evaluation. At creation it will be recognized and compiled to tree-like internal code. At evaluation stage only fast calculations are performed. There is no difference between lower or upper case in formulas. If argument value lie outside the range of function definition then function returns NaN. @xref{Textual formulas}.

@deftypemethod mglFormula @code{} mglFormula (@code{const char *}str)
Parses the formula @var{str} and creates formula-tree. Constructor recursively parses the formula and creates a tree-like structure containing functions and operators for fast further evaluating by @code{Calc()} or @code{CalcD()} functions.
@end deftypemethod
@deftypemethod mglFormula @code{float} Calc (@code{float} x, @code{float} y=@code{0}, @code{float} z=@code{0}, @code{float} u=@code{0})
Evaluates the formula for @code{'x','r'}=@var{x}, @code{'y','n'}=@var{y}, @code{'z','t'}=@var{z}, @code{'a','u'}=@var{u}. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{float} Calc (@code{float} x, @code{float} y, @code{float} z, @code{float} u, @code{float} v, @code{float} w)
Evaluates the formula for @code{'x'}=@var{x}, @code{'y'}=@var{y}, @code{'z'}=@var{z}, @code{'u'}=@var{u}, @code{'v'}=@var{v}, @code{'w'}=@var{w}. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{float} Calc (@code{float} var@code{['z'-'a'+1]})
Evaluates the formula for variables in array @var{var}['z'-'a']. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{float} CalcD (@code{float} var@code{['z'-'a'+1]}, @code{char} diff)
Evaluates the formula derivation respect to @var{diff} for variables in array @var{var}['z'-'a']. Error code (if one) can be obtained from function @code{GetError()}.
@end deftypemethod
@deftypemethod mglFormula @code{int} GetError ()
Returns error code: @code{0} means no error; @code{ERR_LOG} means error in logarithm or power functions; @code{ERR_ARC} means error in inverse functions (like asin); @code{ERR_SQRT} means error in sqrt function.
@end deftypemethod


@c ------------------------------------------------------------------
@node mglColor class, mglPoint class, mglFormula class, Other classes
@section mglColor class
@cindex mglColor

Structure for working with colors. This structure is defined in @code{#include <mgl/type.h>}.

There are two ways to set the color in MathGL. First one is using of float values of red, green and blue channels for precise color definition. The second way is the using of character id. There are a set of characters specifying frequently used colors. Normally capital letter gives more dark color than lowercase one. @xref{Line styles}.

@deftypecv {Parameter} mglColor @code{float} {r, g, b, a}
Reg, green and blue component of color.
@end deftypecv

@deftypemethod mglColor @code{} mglColor (@code{float} R, @code{float} G, @code{float} B, @code{float} A=@code{1})
Constructor sets the color by float values of Red, Green, Blue and Alpha channels. These values should be in interval [0,1].
@end deftypemethod
@deftypemethod mglColor @code{} mglColor (@code{char} c=@code{'k'}, @code{float} bright=@code{1})
Constructor sets the color from character id. The black color is used by default. Parameter @var{br} set additional ``lightness'' of color.
@end deftypemethod
@deftypemethod mglColor @code{void} Set (@code{float} R, @code{float} G, @code{float} B, @code{float} A=@code{1})
Sets color from values of Red, Green, Blue and Alpha channels. These values should be in interval [0,1].
@end deftypemethod
@deftypemethod mglColor @code{void} Set (@code{mglColor} c, @code{float} bright=@code{1})
Sets color as ``lighted'' version of color @var{c}.
@end deftypemethod
@deftypemethod mglColor @code{void} Set (@code{char} p, @code{float} bright=@code{1})
Sets color from symbolic id.
@end deftypemethod
@deftypemethod mglColor @code{bool} Valid ()
Checks correctness of the color.
@end deftypemethod
@deftypemethod mglColor @code{float} Norm ()
Gets maximal of spectral component.
@end deftypemethod
@deftypemethod mglColor @code{bool} operator== (@code{const mglColor &}c)
@deftypemethodx mglColor @code{bool} operator!= (@code{const mglColor &}c)
Compare with another color
@end deftypemethod

@deftypemethod mglColor @code{bool} operator*= (@code{float} v)
Multiplies color components by number @var{v}.
@end deftypemethod

@deftypemethod mglColor @code{bool} operator+= (@code{const mglColor &}c)
Adds color @var{c} component by component.
@end deftypemethod

@deftypemethod mglColor @code{bool} operator-= (@code{const mglColor &}c)
Subtracts color @var{c} component by component.
@end deftypemethod


@deftypefn {Library Function} {mglColor} operator+ (@code{const mglColor &}a, @code{const mglColor &}b)
Adds colors by its RGB values.
@end deftypefn
@deftypefn {Library Function} @code{mglColor} operator- (@code{const mglColor &}a, @code{const mglColor &}b)
Subtracts colors by its RGB values.
@end deftypefn
@deftypefn {Library Function} @code{mglColor} operator* (@code{const mglColor &}a, @code{float} b)
@deftypefnx {Library Function} @code{mglColor} operator* (@code{float} a, @code{const mglColor &}b)
Multiplies color by number.
@end deftypefn
@deftypefn {Library Function} @code{mglColor} operator/ (@code{const mglColor &}a, @code{float} b)
Divide color by number.
@end deftypefn
@deftypefn {Library Function} @code{mglColor} operator! (@code{const mglColor &}a)
Return inverted color.
@end deftypefn

@c ------------------------------------------------------------------
@node mglPoint class, mglFont class, mglColor class, Other classes
@section mglPoint class
@cindex mglPoint

Structure describes point in space. This structure is defined in @code{#include <mgl/type.h>}

@deftypecv {Parameter} mglPoint @code{float} {x, y, z, c}
Point coordinates @{x,y,z@} and one extra value @var{c} used for amplitude, transparency and so on. By default all values are zero.
@end deftypecv

@deftypemethod mglPoint @code{} mglPoint (@code{float} X=@code{0}, @code{float} Y=@code{0}, @code{float} Z=@code{0}, @code{float} C=@code{0})
Constructor sets the color by float values of Red, Green, Blue and Alpha channels. These values should be in interval [0,1].
@end deftypemethod

@deftypemethod mglPoint @code{bool} IsNAN ()
Returns @code{true} if point contain NAN values.
@end deftypemethod
@deftypemethod mglPoint @code{float} norm ()
Returns the norm @math{\sqrt@{x^2+y^2+z^2@}} of vector.
@end deftypemethod
@deftypemethod mglPoint @code{void} Normalize ()
Normalizes vector to be unit vector.
@end deftypemethod
@deftypemethod mglPoint @code{float} val (@code{int} i)
Returns point component: @var{x} for @var{i}=0, @var{y} for @var{i}=1, @var{z} for @var{i}=2, @var{c} for @var{i}=3.
@end deftypemethod


@deftypefn {Library Function} @code{mglPoint} operator+ (@code{const mglPoint &}a, @code{const mglPoint &}b)
Point of summation (summation of vectors).
@end deftypefn
@deftypefn {Library Function} @code{mglPoint} operator- (@code{const mglPoint &}a, @code{const mglPoint &}b)
Point of difference (difference of vectors).
@end deftypefn
@deftypefn {Library Function} @code{mglPoint} operator* (@code{float} a, @code{const mglPoint &}b)
@deftypefnx {Library Function} @code{mglPoint} operator* (@code{const mglPoint &}a, @code{float} b)
Multiplies (scale) points by number.
@end deftypefn
@deftypefn {Library Function} @code{mglPoint} operator/ (@code{const mglPoint &}a, @code{float} b)
Multiplies (scale) points by number 1/b.
@end deftypefn
@deftypefn {Library Function} @code{float} operator* (@code{const mglPoint &}a, @code{const mglPoint &}b)
Scalar product of vectors.
@end deftypefn

@deftypefn {Library Function} @code{mglPoint} operator/ (@code{const mglPoint &}a, @code{const mglPoint &}b)
Return vector of element-by-element product.
@end deftypefn

@deftypefn {Library Function} @code{mglPoint} operator^ (@code{const mglPoint &}a, @code{const mglPoint &}b)
Cross-product of vectors.
@end deftypefn
@deftypefn {Library Function} @code{mglPoint} operator& (@code{const mglPoint &}a, @code{const mglPoint &}b)
The part of @var{a} which is perpendicular to vector @var{b}.
@end deftypefn
@deftypefn {Library Function} @code{mglPoint} operator| (@code{const mglPoint &}a, @code{const mglPoint &}b)
The part of @var{a} which is parallel to vector @var{b}.
@end deftypefn

@deftypefn {Library Function} @code{mglPoint} operator! (@code{const mglPoint &}a)
Return vector perpendicular to vector @var{a}.
@end deftypefn
@deftypefn {Library Function} @code{float} mgl_norm (@code{const mglPoint &}a)
Return the norm sqrt(|@var{a}|^2) of vector @var{a}.
@end deftypefn

@deftypefn {Library Function} @code{bool} operator== (@code{const mglPoint &}a, @code{const mglPoint &}b)
Return true if points are the same.
@end deftypefn
@deftypefn {Library Function} @code{bool} operator!= (@code{const mglPoint &}a, @code{const mglPoint &}b)
Return true if points are different.
@end deftypefn

@c ------------------------------------------------------------------
@node mglFont class, , mglPoint class, Other classes
@section mglFont class
@cindex mglFont

Class for working with font: load, get metrics, parse and draw strings. This class is defined in @code{#include <mgl/font.h>}. This class is accessible only from C++ (and only from GNU compilers in default binary files).

The class is based on loading and drawing of vector Hershey font. There are two styles of specifying of the font type and aligning: by integer parameters or by string.

The string can be any combination of characters: @samp{rbiLCRwou}. The font types are: @samp{r} -- roman font, @samp{i} -- italic style, @samp{b} -- bold style. By default roman font (that is @samp{} or @samp{r}) is used. The align types are: @samp{L} -- align left (default), @samp{C} -- align center, @samp{R} -- align right. Additional font effects are: @samp{w} -- wire, @samp{o} -- over-lined, @samp{u} -- underlined. Parsing of the string to special (TeX-like) commands will be done if variable @var{parse} is true (it's default). See also @pxref{Font styles}.

The over way of font and alignment setting is the using of the integer constant. Integer font Id can be one of predefined constants: @code{MGL_FONT_ITAL, MGL_FONT_BOLD, MGL_FONT_BOLD_ITAL = MGL_FONT_ITAL+MGL_FONT_BOLD}. Default font is @code{MGL_FONT_ROMAN}. Also there are flags @code{MGL_FONT_ULINE, MGL_FONT_OLINE, MGL_FONT_WIRE} for additional font effects. Align parameter controls the text alignment: 0 -- align left, 1 -- align center, 2 -- align right.


@menu
* Format of font files::
@end menu


@deftypemethod mglFont @code{} mglFont (@code{const char *}name=@code{MGL_DEF_FONT_NAME}, @code{const char *}path=@code{NULL})
Initialize the font and load data from file @var{name} (default name is "STIX" for Linux and MacOS) or if  @var{name}=@code{NULL} limited data from memory (default for Windows).
@end deftypemethod
@deftypemethod mglFont @code{bool} Load (@code{const char *} base, @code{const char *}path=@code{NULL})
Load font from file @var{path}/@var{base} into the memory. The font may contain 4 files: @var{base}.vfm, @var{base}_b.vfm, @var{base}_i.vfm, @var{base}_bi.vfm. Appendix contain detailed description of font format.
@end deftypemethod
@deftypemethod mglFont @code{void} Restore ()
Restore default font.
@end deftypemethod
@deftypemethod mglFont @code{void} Copy (@code{mglFont *}fnt)
Copy data from other font instance.
@end deftypemethod
@deftypemethod mglFont @code{void} Clear ()
Clear memory by deleting the loaded font.
@end deftypemethod
@deftypemethod mglFont @code{unsigned} GetNumGlyph ()
Return the number of glyphs in the font.
@end deftypemethod
@deftypemethod mglFont @code{bool} Ready ()
Return true if font is loaded and ready for use.
@end deftypemethod


@deftypemethod mglFont @code{float} Height (@code{int} font)
Gets height of text for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const char *}str, @code{int} font=@code{0}, @code{int} align=@code{0})
Prints 8-bit text string for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const char *}str, @code{int} font=@code{0})
Gets width of 8-bit text string for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const wchar_t *}str, @code{int} font=@code{0}, @code{int} align=@code{0})
Prints Unicode text string for font specified by integer constant.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const wchar_t *}str, @code{int} font=@code{0})
Gets width of Unicode text string for font specified by integer constant.
@end deftypemethod


@deftypemethod mglFont @code{float} Height (@code{const char *}how)
Gets height of text for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const char *}str, @code{const char *}how)
Prints 8-bit text string for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const char *}str, @code{const char *}how)
Gets width of 8-bit text string for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Puts (@code{const wchar_t *}str, @code{const char *}how)
Prints Unicode text string for font specified by string.
@end deftypemethod
@deftypemethod mglFont @code{float} Width (@code{const wchar_t *}str, @code{const char *}how)
Gets width of Unicode text string for font specified by string.
@end deftypemethod

@deftypecv {Parameter} mglFont @code{HMGL} gr
Instance of mglGraph class which is used for character drawing.
@end deftypecv
@deftypecv {Parameter} mglFont @code{bool} parse
Flag for switching on/off the parsing of TeX commands. Default value is @code{true}.
@end deftypecv

@c ------------------------------------------------------------------
@node Format of font files, , , mglFont class
@subsection Format of font files

Starting from v.1.6 the MathGL library uses new font files. The font is defined in 4 files with suffixes @samp{*.vfm}, @samp{*_b.vfm}, @samp{*_i.vfm}, @samp{*_bi.vfm}. These files are text files containing the data for roman font, bold font, italic font and bold italic font. The files (or some symbols in the files) for bold, italic or bold italic fonts can be absent. In this case the roman glyph will be used for them. By analogy, if the bold italic font is absent but the bold font is present then bold glyph will be used for bold italic. You may create these font files by yourself from *.ttf, *.otf files with the help of program @code{font_tools}. This program can be found at MathGL home site.

The format of font files (*.vfm -- vector font for MathGL) is the following.
@enumerate
@item
First string contains human readable comment and is always ignored.
@item
Second string contains 3 numbers, delimited by space or tabulation. The order of numbers is the following: @var{numg} -- the number of glyphs in the file (integer), @var{fact} -- the factor for glyph sizing (float), @var{size} -- the size of buffer for glyph description (integer).
@item
After it @var{numg}-th strings with glyphs description are placed. Each string contains 6 positive numbers, delimited by space of tabulation. The order of numbers is the following: Unicode glyph ID, glyph width, number of lines in glyph, position of lines coordinates in the buffer (length is 2*number of lines), number of triangles in glyph, position of triangles coordinates in the buffer (length is 6*number of triangles).
@item
The end of file contains the buffer with point coordinates at lines or triangles vertexes. The size of buffer (the number of integer) is @var{size}.
@end enumerate

Each font file can be compressed by gzip.

Note: the closing contour line  is done automatically (so the last segment may be absent). For starting new contour use a point with coordinates @code{@{0x3fff, 0x3fff@}}.

