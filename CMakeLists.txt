cmake_minimum_required(VERSION 2.8)

project( MathGL )

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: 
		None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif(NOT CMAKE_BUILD_TYPE)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(MathGL_VERSION_MAJOR 2)
set(MathGL_VERSION_MINOR 1)
SET(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY TRUE)

include(CMakeDependentOption)

option(enable-double "Enable double precision in MathGL library" ON)
option(enable-simple "Slightly increase drawing speed but disable mglDataA class")
option(enable-mpi "Enable mpi")
option(enable-all "Enable all core features")
option(enable-all-widgets "Enable all Widgets")
option(enable-all-swig "Enable all SWIG based interfaces")
option(enable-lgpl "Enable only LGPL part of MathGL" OFF)
#option(enable-ltdl "Enable loading modules support")
option(enable-pthread "Enable POSIX threads support")
option(enable-gsl "Enable gsl support")
option(enable-jpeg "Enable jpeg support")
option(enable-png "Enable png support" ON)
option(enable-zlib "Enable zlib support" ON)
#option(enable-u3d "Enable u3d support")
option(enable-pdf "Enable pdf support")
option(enable-gif "Enable gif support")
option(enable-hdf4 "Enable hdf4 support")
option(enable-hdf5 "Enable hdf5 support")
option(enable-opengl "Enable OpenGL support" ON)
option(enable-glut "Enable glut support")
option(enable-fltk "Enable fltk widget")
option(enable-wx "Enable wxWidget widget")
option(enable-qt "Enable Qt4 widget")
option(enable-python "Enable python interface")
option(enable-octave "Enable octave interface")
option(enable-octave-install "Octave interface will install for all users" ON)
option(enable-doc "Enable documentation building")

include_directories( ${MathGL_SOURCE_DIR}/include ${MathGL_BINARY_DIR}/include)

if(NOT MSVC AND NOT BORLAND)
	find_library(M_LIB m)
	if(NOT M_LIB)
		message(SEND_ERROR "${M_LIB}")
	endif(NOT M_LIB)
else(NOT MSVC AND NOT BORLAND)
	set(M_LIB)
endif(NOT MSVC AND NOT BORLAND)

if(enable-double)
	set(MGL_USE_DOUBLE 1)
else(enable-double)
	set(MGL_USE_DOUBLE 0)
endif(enable-double)

if(enable-simple)
	set(MGL_NO_DATA_A 1)
message(STATUS "Class mglDataA is switched off.")
else(enable-simple)
	set(MGL_NO_DATA_A 0)
endif(enable-simple)

if(enable-mpi)
	set(MGL_HAVE_MPI 1)
	find_package(MPI REQUIRED)
	set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
	set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
	include_directories(${MPI_INCLUDE_PATH})
else(enable-mpi)
	set(MGL_HAVE_MPI 0)
endif(enable-mpi)

if((enable-all OR enable-gsl) AND (NOT enable-lgpl) )
	set(MGL_HAVE_GSL 1)
	find_library(GSL_LIB gsl)
	find_library(GSL_CBLAS_LIB gslcblas)
	find_path(GSL_INCLUDE_DIR gsl/gsl_fft_complex.h)
	if(NOT GSL_LIB OR NOT GSL_CBLAS_LIB OR NOT GSL_INCLUDE_DIR)
		message(SEND_ERROR "${GSL_LIB}")
		message(SEND_ERROR "${GSL_CBLAS_LIB}")
		message(SEND_ERROR "${GSL_INCLUDE_DIR}")
		message(SEND_ERROR "Couldn't find GSL libraries.")
	endif(NOT GSL_LIB OR NOT GSL_CBLAS_LIB OR NOT GSL_INCLUDE_DIR)
else((enable-all OR enable-gsl) AND (NOT enable-lgpl) )
	set(MGL_HAVE_GSL 0)
endif((enable-all OR enable-gsl) AND (NOT enable-lgpl) )

#if(enable-all OR enable-ltdl)
#	set(MGL_HAVE_LTDL 1)
#	find_library(LTDL_LIB ltdl)
#	find_path(LTDL_INCLUDE_DIR ltdl.h)
#	if(NOT LTDL_LIB OR NOT LTDL_INCLUDE_DIR)
#		message(SEND_ERROR "${LTDL_LIB}")
#		message(SEND_ERROR "${LTDL_INCLUDE_DIR}")
#		message(SEND_ERROR "Couldn't find LTDL library.")
#	endif(NOT LTDL_LIB OR NOT LTDL_INCLUDE_DIR)
#else(enable-all OR enable-ltdl)
#	set(MGL_HAVE_LTDL 0)
#endif(enable-all OR enable-ltdl)

if(enable-all OR enable-pthread)
	set(MGL_HAVE_PTHREAD 1)
	include(FindThreads)
	if(NOT CMAKE_USE_PTHREADS_INIT)
		message(SEND_ERROR "Couldn't find POSIX threads library.")
	endif(NOT CMAKE_USE_PTHREADS_INIT)
else(enable-all OR enable-pthread)
	set(MGL_HAVE_PTHREAD 0)
endif(enable-all OR enable-pthread)

if((enable-all OR enable-hdf4) AND (NOT enable-lgpl) )
	set(MGL_HAVE_HDF4 1)
	find_library(HDF4_LIB df)
	find_library(HDF4MF_LIB mfhdf)
	find_path(HDF4_INCLUDE_DIR hdf/mfhdf.h)
	if(NOT HDF4_LIB OR NOT HDF4MF_LIB OR NOT HDF4_INCLUDE_DIR)
		message(SEND_ERROR "${HDF4_LIB}")
		message(SEND_ERROR "${HDF4MF_LIB}")
		message(SEND_ERROR "${HDF4_INCLUDE_DIR}")
		message(SEND_ERROR "Couldn't find HDF4 libraries.")
	endif(NOT HDF4_LIB OR NOT HDF4MF_LIB OR NOT HDF4_INCLUDE_DIR)
else((enable-all OR enable-hdf4) AND (NOT enable-lgpl) )
	set(MGL_HAVE_HDF4 0)
endif((enable-all OR enable-hdf4) AND (NOT enable-lgpl) )

if((enable-all OR enable-hdf5) AND (NOT enable-lgpl) )
	set(MGL_HAVE_HDF5 1)
	include(FindHDF5)
	if(NOT HDF5_FOUND)
		message(SEND_ERROR "Couldn't find HDF5 library.")
	endif(NOT HDF5_FOUND)
else((enable-all OR enable-hdf5) AND (NOT enable-lgpl) )
	set(MGL_HAVE_HDF5 0)
endif((enable-all OR enable-hdf5) AND (NOT enable-lgpl) )

if(enable-all OR enable-jpeg)
	set(MGL_HAVE_JPEG 1)
	include(FindJPEG)
	if(NOT JPEG_FOUND)
		message(SEND_ERROR "Couldn't find JPEG library.")
	endif(NOT JPEG_FOUND)
else(enable-all OR enable-jpeg)
	set(MGL_HAVE_JPEG 0)
endif(enable-all OR enable-jpeg)


if(enable-all OR enable-zlib)
	set(MGL_HAVE_ZLIB 1)
	include(FindZLIB)
	if(NOT ZLIB_FOUND)
		message(SEND_ERROR "Couldn't find ZLib library.")
	endif(NOT ZLIB_FOUND)
else(enable-all OR enable-zlib)
	set(MGL_HAVE_ZLIB 0)
endif(enable-all OR enable-zlib)

if(enable-all OR enable-png)
	set(MGL_HAVE_PNG 1)
	if(NOT MGL_HAVE_ZLIB)
		message(SEND_ERROR "You have to enable ZLib if you plan to use PNG export.")
	endif(NOT MGL_HAVE_ZLIB)
	include(FindPNG)
	if(NOT PNG_FOUND)
		message(SEND_ERROR "Couldn't find PNG library.")
	endif(NOT PNG_FOUND)
else(enable-all OR enable-png)
	set(MGL_HAVE_PNG 0)
endif(enable-all OR enable-png)


# if(enable-u3d AND (NOT enable-lgpl) )
# 	set(MGL_HAVE_U3D 1)
# 	find_library(U3D_LIB IDTF)
# 	if(NOT U3D_LIB)
# 		message(SEND_ERROR "Couldn't find U3D libraries.")
# 	endif(NOT U3D_LIB)
# 	find_path(U3D_INCLUDE_DIR u3d/SceneConverterLib.h)
# 	if(NOT U3D_INCLUDE_DIR)
# 		message(SEND_ERROR "Couldn't find U3D headers.")
# 	endif(NOT U3D_INCLUDE_DIR)
# 	message(STATUS "Found U3D libraries at: ${U3D_LIB}")
# 	message(STATUS "Found U3D headers: ${U3D_INCLUDE_DIR}")
# else(enable-u3d AND (NOT enable-lgpl) )
# 	set(MGL_HAVE_U3D 0)
# endif(enable-u3d AND (NOT enable-lgpl) )

if((enable-all OR enable-pdf) AND (NOT enable-lgpl) )
	set(MGL_HAVE_PDF 1)
	if(NOT MGL_HAVE_PNG)
		message(SEND_ERROR "You have to enable PNG if you plan to use PDF export.")
	endif(NOT MGL_HAVE_PNG)
	find_library(HPDF_LIB hpdf)
	if(NOT HPDF_LIB)
		message(SEND_ERROR "Couldn't find libHaru.")
	endif(NOT HPDF_LIB)
	find_path(HPDF_INCLUDE_DIR hpdf_u3d.h)
	if(NOT HPDF_INCLUDE_DIR)
		message(SEND_ERROR "Couldn't find headers of 3d-enabled version of libhpdf.")
	endif(NOT HPDF_INCLUDE_DIR)
#	message(STATUS "Found libHaru library at: ${HPDF_LIB}")
#	message(STATUS "Found libHaru headers: ${HPDF_INCLUDE_DIR}")
else((enable-all OR enable-pdf) AND (NOT enable-lgpl) )
	set(MGL_HAVE_PDF 0)
endif((enable-all OR enable-pdf) AND (NOT enable-lgpl) )

if(enable-all OR enable-gif)
	set(MGL_HAVE_GIF 1)
	include(FindGIF)
	if(NOT GIF_FOUND)
		message(SEND_ERROR "Couldn't find GIF library.")
	endif(NOT GIF_FOUND)
else(enable-all OR enable-gif)
	set(MGL_HAVE_GIF 0)
endif(enable-all OR enable-gif)

if(enable-all OR enable-opengl)
	set(MGL_HAVE_OPENGL 1)
	include(FindOpenGL)
	if(NOT OPENGL_FOUND)
		message(SEND_ERROR "Couldn't find OpenGL libraries.")
	endif(NOT OPENGL_FOUND)
else(enable-all OR enable-opengl)
	set(MGL_HAVE_OPENGL 0)
endif(enable-all OR enable-opengl)

if((enable-all-widgets OR enable-glut) AND (NOT enable-lgpl) )
	set(MGL_HAVE_GLUT 1)
	if(NOT MGL_HAVE_OPENGL)
		message(SEND_ERROR "You have to enable OpenGL if you plan to use GLUT.")
	endif(NOT MGL_HAVE_OPENGL)
	include(FindGLUT)
	if(NOT GLUT_FOUND)
		message(SEND_ERROR "Couldn't find GLUT library.")
	endif(NOT GLUT_FOUND)
else((enable-all-widgets OR enable-glut) AND (NOT enable-lgpl) )
	set(MGL_HAVE_GLUT 0)
endif((enable-all-widgets OR enable-glut) AND (NOT enable-lgpl) )

if((enable-all-widgets OR enable-fltk) AND (NOT enable-lgpl) )
	set(MGL_HAVE_FLTK 1)
	include(FindFLTK)
	if(NOT FLTK_FOUND)
		message(SEND_ERROR "Couldn't find FLTK library.")
	endif(NOT FLTK_FOUND)
else((enable-all-widgets OR enable-fltk) AND (NOT enable-lgpl) )
	set(MGL_HAVE_FLTK 0)
endif((enable-all-widgets OR enable-fltk) AND (NOT enable-lgpl) )

#if((enable-all-widgets OR enable-wx) AND (NOT enable-lgpl) )
if((enable-wx) AND (NOT enable-lgpl) )
	set(MGL_HAVE_WX 1)
	FIND_PACKAGE(wxWidgets COMPONENTS base core gl)
	if(NOT wxWidgets_FOUND)
		message(SEND_ERROR "Couldn't find wxWidgets library.")
	endif(NOT wxWidgets_FOUND)
#else((enable-all-widgets OR enable-wx) AND (NOT enable-lgpl) )
else((enable-wx) AND (NOT enable-lgpl) )
	set(MGL_HAVE_WX 0)
#endif((enable-all-widgets OR enable-wx) AND (NOT enable-lgpl) )
endif((enable-wx) AND (NOT enable-lgpl) )

if((enable-all-widgets OR enable-qt) AND (NOT enable-lgpl) )
	set(MGL_HAVE_QT 1)
	FIND_PACKAGE(Qt4)
	if(NOT QT4_FOUND)
		message(SEND_ERROR "Couldn't find Qt4 library.")
	endif(NOT QT4_FOUND)
else((enable-all-widgets OR enable-qt) AND (NOT enable-lgpl) )
	set(MGL_HAVE_QT 0)
endif((enable-all-widgets OR enable-qt) AND (NOT enable-lgpl) )

if((enable-all-swig OR enable-python) AND (NOT enable-lgpl) )
	set(MGL_HAVE_PYTHON 1)
	find_program(pycompile_prog pycompile)
	if(NOT pycompile_prog)
		message(SEND_ERROR "Couldn't find pycompile needed for python interfaces compiling.")
	endif(NOT pycompile_prog)
	FIND_PACKAGE(PythonInterp)
	if(NOT PYTHONINTERP_FOUND)
		message(SEND_ERROR "Couldn't find python interpreter.")
	endif(NOT PYTHONINTERP_FOUND)
	FIND_PACKAGE(PythonLibs)
	if(NOT PYTHONLIBS_FOUND)
		message(SEND_ERROR "Couldn't find python development libraries.")
	endif(NOT PYTHONLIBS_FOUND)
	execute_process(
		COMMAND ${PYTHON_EXECUTABLE} -c "import numpy; print numpy.get_include()"
		OUTPUT_VARIABLE NUMPY_INCLUDE_PATH
		RESULT_VARIABLE NUMPY_ERR
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	if(NOT NUMPY_INCLUDE_PATH)
		message(SEND_ERROR "Couldn't find numpy.")
	endif(NOT NUMPY_INCLUDE_PATH)
else((enable-all-swig OR enable-python) AND (NOT enable-lgpl) )
	set(MGL_HAVE_PYTHON 0)
endif((enable-all-swig OR enable-python) AND (NOT enable-lgpl) )

if((enable-all-swig OR enable-octave) AND (NOT enable-lgpl) )
	set(MGL_HAVE_OCTAVE 1)
	find_program(oct_prog octave-config)
	if(NOT oct_prog)
		message(SEND_ERROR "Couldn't find octave-config needed for octave interfaces compiling.")
	endif(NOT oct_prog)
	find_program(oct_exec octave)
	if(NOT oct_exec)
		message(SEND_ERROR "Couldn't find octave needed for octave interfaces compiling.")
	endif(NOT oct_exec)
	find_program(oct_mk mkoctfile)
	if(NOT oct_mk)
		message(SEND_ERROR "Couldn't find mkoctfile needed for octave interfaces compiling.")
	endif(NOT oct_mk)
	find_program(oct_tar tar)
	if(NOT oct_tar)
		message(SEND_ERROR "Couldn't find tar needed for octave interfaces creation.")
	endif(NOT oct_tar)
else((enable-all-swig OR enable-octave) AND (NOT enable-lgpl) )
	set(MGL_HAVE_OCTAVE 0)
endif((enable-all-swig OR enable-octave) AND (NOT enable-lgpl) )

if(enable-doc)
	set(MGL_HAVE_DOC 1)
	find_program(findmi makeinfo)
	if(NOT findmi)
		message(SEND_ERROR "Couldn't find makeinfo needed for documentation building.")
	endif(NOT findmi)
	find_program(findth texi2html)
	if(NOT findth)
		message(SEND_ERROR "Couldn't find texi2html needed for documentation building.")
	endif(NOT findth)
	find_program(findtp texi2pdf)
	if(NOT findtp)
		message(SEND_ERROR "Couldn't find texi2pdf needed for documentation building.")
	endif(NOT findtp)
else(enable-doc)
	set(MGL_HAVE_DOC 0)
endif(enable-doc)

if(MGL_HAVE_PYTHON OR MGL_HAVE_OCTAVE)
	FIND_PACKAGE(SWIG)
	if(NOT SWIG_FOUND)
		message(SEND_ERROR "Couldn't find swig needed for interfaces compiling.")
	endif(NOT SWIG_FOUND)
	INCLUDE(${SWIG_USE_FILE})
endif(MGL_HAVE_PYTHON OR MGL_HAVE_OCTAVE)

#execute_process(
#	COMMAND ${oct_prog} -q --eval \'strcat\(octave_config_info\("canonical_host_type"\), "-", octave_config_info\("api_version"\)\)'|sed -e 's/ans = //'
#	OUTPUT_VARIABLE OCTAVE_ARCH
#	)
#message(SEND_ERROR "${OCTAVE_ARCH}")

if(UNIX)
	add_definitions(-DNO_COLOR_ARRAY)
endif(UNIX)

if(WIN32)
	add_definitions(-DWIN32)
endif(WIN32)

if(NOT WIN32)
set(MGL_DATA_PATH "${CMAKE_INSTALL_PREFIX}/share/mathgl")
set(MGL_DOC_PATH "${CMAKE_INSTALL_PREFIX}/share/doc/mathgl")
set(MGL_MAN_PATH "${CMAKE_INSTALL_PREFIX}/share/man")
set(MGL_INFO_PATH "${CMAKE_INSTALL_PREFIX}/share/info")
set(MGL_FONT_PATH "${MGL_DATA_PATH}/fonts")
install(DIRECTORY fonts/ DESTINATION ${MGL_FONT_PATH}
		PATTERN ".svn" EXCLUDE
		PATTERN "*.vfm")
endif(NOT WIN32)

add_subdirectory( src )
add_subdirectory( widgets )
add_subdirectory( include )
add_subdirectory( udav )
#add_subdirectory( mgllab )
add_subdirectory( lang )
if(NOT MSVC AND NOT BORLAND)
add_subdirectory( utils )
add_subdirectory( examples )
add_subdirectory( texinfo )
endif(NOT MSVC AND NOT BORLAND)
